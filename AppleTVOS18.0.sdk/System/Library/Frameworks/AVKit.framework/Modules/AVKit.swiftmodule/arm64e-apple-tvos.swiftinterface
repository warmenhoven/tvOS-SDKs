// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-4.2 (swiftlang-6.0.0.7.24 clang-1600.0.25.1)
// swift-module-flags: -target arm64e-apple-tvos18.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -library-level api -enable-bare-slash-regex -user-module-version 1190.60.2.1 -module-name AVKit
@_exported import AVKit
import Combine
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension AVKit.AVPlayerViewController {
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public var experienceController: AVKit.AVExperienceController {
    get
  }
}
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
extension AVKit.AVExperienceController {
  public struct TransitionContext : Swift.Equatable {
    public enum Status : Swift.Equatable {
      case preparing
      case transitioning
      case finished(result: AVKit.AVExperienceController.TransitionContext.TransitionResult)
      public static func == (a: AVKit.AVExperienceController.TransitionContext.Status, b: AVKit.AVExperienceController.TransitionContext.Status) -> Swift.Bool
    }
    public enum TransitionResult : Swift.Equatable {
      case completed
      case reversed(reason: AVKit.AVExperienceController.TransitionContext.ReversedReason)
      public static func == (a: AVKit.AVExperienceController.TransitionContext.TransitionResult, b: AVKit.AVExperienceController.TransitionContext.TransitionResult) -> Swift.Bool
    }
    public enum ReversedReason : Swift.Equatable {
      case transitionInProgress
      case invalidExperience
      case invalidConfiguration
      case transitionCancelled
      case transitionFailed
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: AVKit.AVExperienceController.TransitionContext.ReversedReason, b: AVKit.AVExperienceController.TransitionContext.ReversedReason) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public let status: AVKit.AVExperienceController.TransitionContext.Status
    public let fromExperience: AVKit.AVExperienceController.Experience
    public let toExperience: AVKit.AVExperienceController.Experience
    public static func == (a: AVKit.AVExperienceController.TransitionContext, b: AVKit.AVExperienceController.TransitionContext) -> Swift.Bool
  }
}
@_inheritsConvenienceInitializers @available(visionOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@objc(AVContentSelectionViewController) @_Concurrency.MainActor @preconcurrency open class AVContentSelectionViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS, unavailable)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor final public class AVMultiviewManager : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($contentSelectionViewController) @_Concurrency.MainActor final public var contentSelectionViewController: AVKit.AVContentSelectionViewController? {
    get
    @available(iOS, unavailable, introduced: 13.0)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable, introduced: 6.0)
    @available(visionOS, unavailable)
    @available(macOS, unavailable, introduced: 10.15)
    set
    @available(iOS, unavailable, introduced: 13.0)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable, introduced: 6.0)
    @available(visionOS, unavailable)
    @available(macOS, unavailable, introduced: 10.15)
    _modify
  }
  @_Concurrency.MainActor final public var $contentSelectionViewController: Combine.Published<AVKit.AVContentSelectionViewController?>.Publisher {
    get
    @available(iOS, unavailable, introduced: 14.0)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable, introduced: 7.0)
    @available(visionOS, unavailable)
    @available(macOS, unavailable, introduced: 11.0)
    set
  }
  @_Concurrency.MainActor public static var `default`: AVKit.AVMultiviewManager {
    get
  }
  @_Concurrency.MainActor final public func dismiss()
  @available(iOS, unavailable, introduced: 13.0)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  @available(macOS, unavailable, introduced: 10.15)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension AVKit.AVExperienceController {
  public enum Experience {
    case embedded
    case expanded
    case multiview
    public static func == (a: AVKit.AVExperienceController.Experience, b: AVKit.AVExperienceController.Experience) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension AVKit.AVExperienceController {
  public struct Experiences : Swift.Collection {
    public typealias Element = AVKit.AVExperienceController.Experience
    public typealias Index = Swift.Int
    public var startIndex: AVKit.AVExperienceController.Experiences.Index {
      get
    }
    public var endIndex: AVKit.AVExperienceController.Experiences.Index {
      get
    }
    public subscript(position: AVKit.AVExperienceController.Experiences.Index) -> AVKit.AVExperienceController.Experiences.Element {
      get
    }
    public func index(after index: AVKit.AVExperienceController.Experiences.Index) -> AVKit.AVExperienceController.Experiences.Index
    public static func recommended<C>(excluding: C = [], including: C = []) -> AVKit.AVExperienceController.Experiences where C : Swift.Collection, C.Element == AVKit.AVExperienceController.Experience
    public static func only<C>(_ experiences: C) -> AVKit.AVExperienceController.Experiences where C : Swift.Collection, C.Element == AVKit.AVExperienceController.Experience
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias Indices = Swift.DefaultIndices<AVKit.AVExperienceController.Experiences>
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias Iterator = Swift.IndexingIterator<AVKit.AVExperienceController.Experiences>
    @available(iOS, unavailable)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias SubSequence = Swift.Slice<AVKit.AVExperienceController.Experiences>
  }
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension AVKit.AVExperienceController {
  @_Concurrency.MainActor public protocol Delegate : AnyObject {
    @_Concurrency.MainActor func experienceController(_ controller: AVKit.AVExperienceController, didChangeTransitionContext context: AVKit.AVExperienceController.TransitionContext)
    @_Concurrency.MainActor func experienceController(_ controller: AVKit.AVExperienceController, prepareForTransitionUsing context: AVKit.AVExperienceController.TransitionContext) async
    @_Concurrency.MainActor func experienceController(_ controller: AVKit.AVExperienceController, didChangeAvailableExperiences availableExperiences: AVKit.AVExperienceController.Experiences)
  }
}
@_hasMissingDesignatedInitializers @available(iOS, unavailable)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor final public class AVExperienceController {
  @discardableResult
  @_Concurrency.MainActor final public func transition(to toExperience: AVKit.AVExperienceController.Experience) async -> AVKit.AVExperienceController.TransitionContext.TransitionResult
  @_Concurrency.MainActor final public var experience: AVKit.AVExperienceController.Experience {
    get
  }
  @_Concurrency.MainActor final public var allowedExperiences: AVKit.AVExperienceController.Experiences {
    get
    set
  }
  @_Concurrency.MainActor final public var availableExperiences: AVKit.AVExperienceController.Experiences {
    get
  }
  @_Concurrency.MainActor weak final public var delegate: (any AVKit.AVExperienceController.Delegate)? {
    get
    set
  }
  @objc deinit
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension AVKit.AVExperienceController : Swift.Sendable {}
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
extension AVKit.AVExperienceController.TransitionContext.ReversedReason : Swift.Hashable {}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension AVKit.AVMultiviewManager : Swift.Sendable {}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension AVKit.AVExperienceController.Experience : Swift.Equatable {}
@available(iOS, unavailable)
@available(macOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension AVKit.AVExperienceController.Experience : Swift.Hashable {}
