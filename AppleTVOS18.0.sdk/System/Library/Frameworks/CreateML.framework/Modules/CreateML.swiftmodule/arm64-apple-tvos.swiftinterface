// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.7.24 clang-1600.0.25.1)
// swift-module-flags: -target arm64-apple-tvos18.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -enable-bare-slash-regex -user-module-version 1325 -module-name CreateML
import Accelerate
import Combine
import CoreGraphics
import CoreImage
import CoreML
import CoreVideo
import CreateMLComponents
import Dispatch
import Foundation
import NaturalLanguage
import Swift
import TabularData
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension CreateML.MLBoostedTreeRegressor {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct ModelParameters {
    @available(macOS, introduced: 10.14, deprecated: 11.0, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public var validationData: CreateML.MLDataTable? {
      get
      set
    }
    @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
    public var validation: CreateML.MLBoostedTreeRegressor.ModelParameters.ValidationData {
      get
      set
    }
    public var maxDepth: Swift.Int
    public var maxIterations: Swift.Int
    public var minLossReduction: Swift.Double
    public var minChildWeight: Swift.Double
    public var randomSeed: Swift.Int
    public var stepSize: Swift.Double
    public var earlyStoppingRounds: Swift.Int?
    public var rowSubsample: Swift.Double
    public var columnSubsample: Swift.Double
    @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
    public init(validation: CreateML.MLBoostedTreeRegressor.ModelParameters.ValidationData, maxDepth: Swift.Int = 6, maxIterations: Swift.Int = 10, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42, stepSize: Swift.Double = 0.3, earlyStoppingRounds: Swift.Int? = nil, rowSubsample: Swift.Double = 1.0, columnSubsample: Swift.Double = 1.0)
    @available(macOS, introduced: 10.14, deprecated: 11.0, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public init(validationData: CreateML.MLDataTable? = nil, maxDepth: Swift.Int = 6, maxIterations: Swift.Int = 10, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42, stepSize: Swift.Double = 0.3, earlyStoppingRounds: Swift.Int? = nil, rowSubsample: Swift.Double = 1.0, columnSubsample: Swift.Double = 1.0)
  }
}
@available(*, unavailable)
extension CreateML.MLBoostedTreeRegressor.ModelParameters : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLBoostedTreeRegressor.ModelParameters : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
extension CreateML.MLBoostedTreeClassifier.ModelParameters {
  @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
  public enum ValidationData {
    case split(strategy: CreateML.MLSplitStrategy)
    @available(macOS, introduced: 10.15, deprecated: 14.0)
    @available(iOS, introduced: 15.0, deprecated: 17.0)
    @available(tvOS, introduced: 16.0, deprecated: 17.0)
    case table(CreateML.MLDataTable)
    @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
    case dataFrame(TabularData.DataFrame)
    case none
  }
}
@available(*, unavailable)
extension CreateML.MLBoostedTreeClassifier.ModelParameters.ValidationData : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public let MLCreateErrorDomain: Swift.String
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public enum MLCreateError : Swift.Error, Swift.Sendable {
  case generic(reason: Swift.String)
  case type(reason: Swift.String)
  case io(reason: Swift.String)
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  case cancelled
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  case incompatibleParameters(parameter: Swift.String, originalValue: Swift.String, newValue: Swift.String)
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  case modifiedTrainingData
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLCreateError : Foundation.CustomNSError, Foundation.LocalizedError {
  public static var errorDomain: Swift.String {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public var errorCode: Swift.Int {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLCreateError : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLRandomForestRegressor : @unchecked Swift.Sendable {
  public var model: CoreML.MLModel {
    get
    @available(macOS, introduced: 10.14, deprecated: 14.0, message: "Setting the model is not supported.")
    @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Setting the model is not supported.")
    @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Setting the model is not supported.")
    set
  }
  public var targetColumn: Swift.String
  public var featureColumns: [Swift.String]
  public let modelParameters: CreateML.MLRandomForestRegressor.ModelParameters
  public var trainingMetrics: CreateML.MLRegressorMetrics {
    get
  }
  public var validationMetrics: CreateML.MLRegressorMetrics {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static let _defaultSessionParameters: CreateML.MLTrainingSessionParameters
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic))) throws
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(tvOS, unavailable)
  public init(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestRegressor.ModelParameters = ModelParameters(validationData: nil)) throws
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(checkpoint: CreateML.MLCheckpoint) throws
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func train(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLRandomForestRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func train(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestRegressor.ModelParameters = .init(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLRandomForestRegressor>
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func makeTrainingSession(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLRandomForestRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func makeTrainingSession(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestRegressor.ModelParameters = .init(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLRandomForestRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func restoreTrainingSession(sessionParameters: CreateML.MLTrainingSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLRandomForestRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func resume(_ session: CreateML.MLTrainingSession<CreateML.MLRandomForestRegressor>) throws -> CreateML.MLJob<CreateML.MLRandomForestRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func predictions(from data: TabularData.DataFrame) throws -> TabularData.AnyColumn
  @available(macOS, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  public func predictions(from data: CreateML.MLDataTable) throws -> CreateML.MLUntypedColumn
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func evaluation(on labeledData: TabularData.DataFrame) -> CreateML.MLRegressorMetrics
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func evaluation(on labeledData: CreateML.MLDataTable) -> CreateML.MLRegressorMetrics
  public func write(to fileURL: Foundation.URL, metadata: CreateML.MLModelMetadata? = nil) throws
  public func write(toFile path: Swift.String, metadata: CreateML.MLModelMetadata? = nil) throws
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLRandomForestRegressor : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
extension CreateML.MLDataTable {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct ColumnNames : Swift.RandomAccessCollection {
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(i: Swift.Int) -> Swift.String {
      get
    }
    @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
    public typealias Element = Swift.String
    @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
    public typealias Index = Swift.Int
    @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
    public typealias Indices = Swift.Range<Swift.Int>
    @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
    public typealias Iterator = Swift.IndexingIterator<CreateML.MLDataTable.ColumnNames>
    @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
    public typealias SubSequence = Swift.Slice<CreateML.MLDataTable.ColumnNames>
  }
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public var columnNames: CreateML.MLDataTable.ColumnNames {
    get
  }
}
@available(*, unavailable)
extension CreateML.MLDataTable.ColumnNames : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.ColumnNames : Swift.Equatable {
  public static func == (lhs: CreateML.MLDataTable.ColumnNames, rhs: CreateML.MLDataTable.ColumnNames) -> Swift.Bool
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.ColumnNames : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
extension CreateML.MLDecisionTreeClassifier.ModelParameters {
  @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
  public enum ValidationData {
    case split(strategy: CreateML.MLSplitStrategy)
    @available(macOS, introduced: 10.15, deprecated: 14.0)
    @available(iOS, introduced: 15.0, deprecated: 17.0)
    @available(tvOS, introduced: 16.0, deprecated: 17.0)
    case table(CreateML.MLDataTable)
    @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
    case dataFrame(TabularData.DataFrame)
    case none
  }
}
@available(*, unavailable)
extension CreateML.MLDecisionTreeClassifier.ModelParameters.ValidationData : Swift.Sendable {
}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
public struct MLCheckpoint : Swift.Codable {
  public var url: Foundation.URL
  public var phase: CreateML.MLPhase
  public var iteration: Swift.Int
  public var date: Foundation.Date
  public var metrics: [CreateML.MLProgress.Metric : Any]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(*, unavailable)
extension CreateML.MLCheckpoint : Swift.Sendable {
}
extension CreateML.MLDecisionTreeRegressor {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct ModelParameters {
    @available(macOS, introduced: 10.14, deprecated: 11.0, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public var validationData: CreateML.MLDataTable? {
      get
      set
    }
    @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
    public var validation: CreateML.MLDecisionTreeRegressor.ModelParameters.ValidationData {
      get
      set
    }
    public var maxDepth: Swift.Int
    public var minLossReduction: Swift.Double
    public var minChildWeight: Swift.Double
    public var randomSeed: Swift.Int
    @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
    public init(validation: CreateML.MLDecisionTreeRegressor.ModelParameters.ValidationData, maxDepth: Swift.Int = 6, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42)
    @available(macOS, introduced: 10.14, deprecated: 11.0, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public init(validationData: CreateML.MLDataTable? = nil, maxDepth: Swift.Int = 6, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42)
  }
}
@available(*, unavailable)
extension CreateML.MLDecisionTreeRegressor.ModelParameters : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDecisionTreeRegressor.ModelParameters : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLModelMetadata : Swift.Sendable {
  public var author: Swift.String
  public var shortDescription: Swift.String
  public var license: Swift.String?
  public var version: Swift.String
  public var additional: [Swift.String : Swift.String]?
  public init(author: Swift.String = NSFullUserName(), shortDescription: Swift.String = "A model trained using CreateML for use with CoreML.", license: Swift.String? = nil, version: Swift.String = "1", additional: [Swift.String : Swift.String]? = nil)
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable {
  public func write(to directoryURL: Foundation.URL) throws
  public func write(toDirectory path: Swift.String) throws
  public func writeCSV(to fileURL: Foundation.URL) throws
  public func writeCSV(toFile path: Swift.String) throws
}
@available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
public enum MLSplitStrategy : Swift.Sendable {
  case automatic
  case fixed(ratio: Swift.Double, seed: Swift.Int?)
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public func resolve(count: Swift.Int) -> (ratio: Swift.Double, seed: Swift.Int)
}
extension CreateML.MLDataTable {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public init(contentsOf url: Foundation.URL, options: CreateML.MLDataTable.ParsingOptions = ParsingOptions()) throws
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct ParsingOptions : Swift.Sendable {
    public var containsHeader: Swift.Bool
    public var delimiter: Swift.String
    public var comment: Swift.String
    public var escape: Swift.String
    public var doubleQuote: Swift.Bool
    public var quote: Swift.String
    public var skipInitialSpaces: Swift.Bool
    public var missingValues: [Swift.String]
    public var lineTerminator: Swift.String
    public var selectColumns: [Swift.String]?
    public var maxRows: Swift.Int?
    public var skipRows: Swift.Int
    public init(containsHeader: Swift.Bool = true, delimiter: Swift.String = ",", comment: Swift.String = "", escape: Swift.String = "\\", doubleQuote: Swift.Bool = true, quote: Swift.String = "\"", skipInitialSpaces: Swift.Bool = true, missingValues: [Swift.String] = ["NA"], lineTerminator: Swift.String = "\n", selectColumns: [Swift.String]? = nil, maxRows: Swift.Int? = nil, skipRows: Swift.Int = 0)
  }
}
extension CreateML.MLLogisticRegressionClassifier {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct ModelParameters {
    public var maxIterations: Swift.Int
    @available(macOS, introduced: 10.14, deprecated: 10.15, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public var validationData: CreateML.MLDataTable? {
      get
      set
    }
    @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
    public var validation: CreateML.MLLogisticRegressionClassifier.ModelParameters.ValidationData {
      get
      set
    }
    public var l1Penalty: Swift.Double
    public var l2Penalty: Swift.Double
    public var stepSize: Swift.Double
    public var convergenceThreshold: Swift.Double
    public var featureRescaling: Swift.Bool
    @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
    public init(validation: CreateML.MLLogisticRegressionClassifier.ModelParameters.ValidationData = .split(strategy: .automatic), maxIterations: Swift.Int = 10, l1Penalty: Swift.Double = 0, l2Penalty: Swift.Double = 0.01, stepSize: Swift.Double = 1.0, convergenceThreshold: Swift.Double = 0.01, featureRescaling: Swift.Bool = true)
    @available(macOS, introduced: 10.14, deprecated: 10.15, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public init(validationData: CreateML.MLDataTable?, maxIterations: Swift.Int = 10, l1Penalty: Swift.Double = 0, l2Penalty: Swift.Double = 0.01, stepSize: Swift.Double = 1.0, convergenceThreshold: Swift.Double = 0.01, featureRescaling: Swift.Bool = true)
  }
}
@available(*, unavailable)
extension CreateML.MLLogisticRegressionClassifier.ModelParameters : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLogisticRegressionClassifier.ModelParameters : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLogisticRegressionClassifier.ModelParameters : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLogisticRegressionClassifier.ModelParameters : Swift.CustomPlaygroundDisplayConvertible {
  public var playgroundDescription: Any {
    get
  }
}
extension CreateML.MLRandomForestRegressor {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct ModelParameters {
    @available(macOS, introduced: 10.14, deprecated: 11.0, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public var validationData: CreateML.MLDataTable? {
      get
      set
    }
    @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
    public var validation: CreateML.MLRandomForestRegressor.ModelParameters.ValidationData {
      get
      set
    }
    public var maxDepth: Swift.Int
    public var maxIterations: Swift.Int
    public var minLossReduction: Swift.Double
    public var minChildWeight: Swift.Double
    public var randomSeed: Swift.Int
    public var rowSubsample: Swift.Double
    public var columnSubsample: Swift.Double
    @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
    public init(validation: CreateML.MLRandomForestRegressor.ModelParameters.ValidationData, maxDepth: Swift.Int = 6, maxIterations: Swift.Int = 10, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42, rowSubsample: Swift.Double = 0.8, columnSubsample: Swift.Double = 0.8)
    @available(macOS, introduced: 10.14, deprecated: 11.0, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public init(validationData: CreateML.MLDataTable? = nil, maxDepth: Swift.Int = 6, maxIterations: Swift.Int = 10, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42, rowSubsample: Swift.Double = 0.8, columnSubsample: Swift.Double = 0.8)
  }
}
@available(*, unavailable)
extension CreateML.MLRandomForestRegressor.ModelParameters : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLRandomForestRegressor.ModelParameters : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable {
  public var rows: CreateML.MLDataTable.Rows {
    get
  }
  public struct Rows {
  }
}
@available(*, unavailable)
extension CreateML.MLDataTable.Rows : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.Rows : Swift.RandomAccessCollection {
  public typealias Element = CreateML.MLDataTable.Row
  public subscript(index: Swift.Int) -> CreateML.MLDataTable.Rows.Element {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias Index = Swift.Int
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias Indices = Swift.Range<Swift.Int>
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias Iterator = Swift.IndexingIterator<CreateML.MLDataTable.Rows>
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias SubSequence = Swift.Slice<CreateML.MLDataTable.Rows>
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.Rows : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLLogisticRegressionClassifier : @unchecked Swift.Sendable {
  public var model: CoreML.MLModel {
    get
    @available(macOS, introduced: 10.14, deprecated: 14.0, message: "Setting the model is not supported.")
    @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Setting the model is not supported.")
    @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Setting the model is not supported.")
    set
  }
  public var targetColumn: Swift.String
  public var featureColumns: [Swift.String]
  public let modelParameters: CreateML.MLLogisticRegressionClassifier.ModelParameters
  public var trainingMetrics: CreateML.MLClassifierMetrics {
    get
  }
  public var validationMetrics: CreateML.MLClassifierMetrics {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static let _defaultSessionParameters: CreateML.MLTrainingSessionParameters
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLogisticRegressionClassifier.ModelParameters = ModelParameters(validation: .split(strategy: .automatic))) throws
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(tvOS, unavailable)
  public init(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLogisticRegressionClassifier.ModelParameters = ModelParameters(validationData: nil)) throws
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(checkpoint: CreateML.MLCheckpoint) throws
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func train(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLogisticRegressionClassifier.ModelParameters = ModelParameters(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLLogisticRegressionClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func train(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLogisticRegressionClassifier.ModelParameters = ModelParameters(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLLogisticRegressionClassifier>
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func makeTrainingSession(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLogisticRegressionClassifier.ModelParameters = .init(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLLogisticRegressionClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func makeTrainingSession(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLogisticRegressionClassifier.ModelParameters = .init(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLLogisticRegressionClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func restoreTrainingSession(sessionParameters: CreateML.MLTrainingSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLLogisticRegressionClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func resume(_ session: CreateML.MLTrainingSession<CreateML.MLLogisticRegressionClassifier>) throws -> CreateML.MLJob<CreateML.MLLogisticRegressionClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func predictions(from data: TabularData.DataFrame) throws -> TabularData.AnyColumn
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func predictions(from data: CreateML.MLDataTable) throws -> CreateML.MLUntypedColumn
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func evaluation(on labeledData: TabularData.DataFrame) -> CreateML.MLClassifierMetrics
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func evaluation(on labeledData: CreateML.MLDataTable) -> CreateML.MLClassifierMetrics
  public func write(to fileURL: Foundation.URL, metadata: CreateML.MLModelMetadata? = nil) throws
  public func write(toFile path: Swift.String, metadata: CreateML.MLModelMetadata? = nil) throws
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLogisticRegressionClassifier : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLogisticRegressionClassifier : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLogisticRegressionClassifier : Swift.CustomPlaygroundDisplayConvertible {
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn {
  public static func == (a: CreateML.MLDataColumn<Element>, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func != (a: CreateML.MLDataColumn<Element>, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func > (a: CreateML.MLDataColumn<Element>, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func < (a: CreateML.MLDataColumn<Element>, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func >= (a: CreateML.MLDataColumn<Element>, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func <= (a: CreateML.MLDataColumn<Element>, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func == (a: CreateML.MLDataColumn<Element>, b: Element) -> CreateML.MLDataColumn<Swift.Bool>
  public static func != (a: CreateML.MLDataColumn<Element>, b: Element) -> CreateML.MLDataColumn<Swift.Bool>
  public static func > (a: CreateML.MLDataColumn<Element>, b: Element) -> CreateML.MLDataColumn<Swift.Bool>
  public static func < (a: CreateML.MLDataColumn<Element>, b: Element) -> CreateML.MLDataColumn<Swift.Bool>
  public static func >= (a: CreateML.MLDataColumn<Element>, b: Element) -> CreateML.MLDataColumn<Swift.Bool>
  public static func <= (a: CreateML.MLDataColumn<Element>, b: Element) -> CreateML.MLDataColumn<Swift.Bool>
  public static func == (a: Element, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func != (a: Element, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func > (a: Element, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func < (a: Element, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func >= (a: Element, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func <= (a: Element, b: CreateML.MLDataColumn<Element>) -> CreateML.MLDataColumn<Swift.Bool>
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == Swift.Int {
  public static func + (a: CreateML.MLDataColumn<Swift.Int>, b: CreateML.MLDataColumn<Swift.Int>) -> CreateML.MLDataColumn<Swift.Int>
  public static func - (a: CreateML.MLDataColumn<Swift.Int>, b: CreateML.MLDataColumn<Swift.Int>) -> CreateML.MLDataColumn<Swift.Int>
  public static func * (a: CreateML.MLDataColumn<Swift.Int>, b: CreateML.MLDataColumn<Swift.Int>) -> CreateML.MLDataColumn<Swift.Int>
  public static func / (a: CreateML.MLDataColumn<Swift.Int>, b: CreateML.MLDataColumn<Swift.Int>) -> CreateML.MLDataColumn<Swift.Int>
  public static func + (a: Swift.Int, b: CreateML.MLDataColumn<Swift.Int>) -> CreateML.MLDataColumn<Swift.Int>
  public static func - (a: Swift.Int, b: CreateML.MLDataColumn<Swift.Int>) -> CreateML.MLDataColumn<Swift.Int>
  public static func * (a: Swift.Int, b: CreateML.MLDataColumn<Swift.Int>) -> CreateML.MLDataColumn<Swift.Int>
  public static func / (a: Swift.Int, b: CreateML.MLDataColumn<Swift.Int>) -> CreateML.MLDataColumn<Swift.Int>
  public static func + (a: CreateML.MLDataColumn<Swift.Int>, b: Swift.Int) -> CreateML.MLDataColumn<Swift.Int>
  public static func - (a: CreateML.MLDataColumn<Swift.Int>, b: Swift.Int) -> CreateML.MLDataColumn<Swift.Int>
  public static func * (a: CreateML.MLDataColumn<Swift.Int>, b: Swift.Int) -> CreateML.MLDataColumn<Swift.Int>
  public static func / (a: CreateML.MLDataColumn<Swift.Int>, b: Swift.Int) -> CreateML.MLDataColumn<Swift.Int>
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == Swift.Double {
  public static func + (a: CreateML.MLDataColumn<Swift.Double>, b: CreateML.MLDataColumn<Swift.Double>) -> CreateML.MLDataColumn<Swift.Double>
  public static func - (a: CreateML.MLDataColumn<Swift.Double>, b: CreateML.MLDataColumn<Swift.Double>) -> CreateML.MLDataColumn<Swift.Double>
  public static func * (a: CreateML.MLDataColumn<Swift.Double>, b: CreateML.MLDataColumn<Swift.Double>) -> CreateML.MLDataColumn<Swift.Double>
  public static func / (a: CreateML.MLDataColumn<Swift.Double>, b: CreateML.MLDataColumn<Swift.Double>) -> CreateML.MLDataColumn<Swift.Double>
  public static func + (a: Swift.Double, b: CreateML.MLDataColumn<Swift.Double>) -> CreateML.MLDataColumn<Swift.Double>
  public static func - (a: Swift.Double, b: CreateML.MLDataColumn<Swift.Double>) -> CreateML.MLDataColumn<Swift.Double>
  public static func * (a: Swift.Double, b: CreateML.MLDataColumn<Swift.Double>) -> CreateML.MLDataColumn<Swift.Double>
  public static func / (a: Swift.Double, b: CreateML.MLDataColumn<Swift.Double>) -> CreateML.MLDataColumn<Swift.Double>
  public static func + (a: CreateML.MLDataColumn<Swift.Double>, b: Swift.Double) -> CreateML.MLDataColumn<Swift.Double>
  public static func - (a: CreateML.MLDataColumn<Swift.Double>, b: Swift.Double) -> CreateML.MLDataColumn<Swift.Double>
  public static func * (a: CreateML.MLDataColumn<Swift.Double>, b: Swift.Double) -> CreateML.MLDataColumn<Swift.Double>
  public static func / (a: CreateML.MLDataColumn<Swift.Double>, b: Swift.Double) -> CreateML.MLDataColumn<Swift.Double>
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == Swift.Bool {
  public static func || (a: CreateML.MLDataColumn<Swift.Bool>, b: CreateML.MLDataColumn<Swift.Bool>) -> CreateML.MLDataColumn<Swift.Bool>
  public static func && (a: CreateML.MLDataColumn<Swift.Bool>, b: CreateML.MLDataColumn<Swift.Bool>) -> CreateML.MLDataColumn<Swift.Bool>
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLDecisionTreeRegressor : @unchecked Swift.Sendable {
  public var model: CoreML.MLModel {
    get
    @available(macOS, introduced: 10.14, deprecated: 14.0, message: "Setting the model is not supported.")
    @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Setting the model is not supported.")
    @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Setting the model is not supported.")
    set
  }
  public var targetColumn: Swift.String
  public var featureColumns: [Swift.String]
  public let modelParameters: CreateML.MLDecisionTreeRegressor.ModelParameters
  public var trainingMetrics: CreateML.MLRegressorMetrics {
    get
  }
  public var validationMetrics: CreateML.MLRegressorMetrics {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static let _defaultSessionParameters: CreateML.MLTrainingSessionParameters
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic))) throws
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(tvOS, unavailable)
  public init(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeRegressor.ModelParameters = ModelParameters(validationData: nil)) throws
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(checkpoint: CreateML.MLCheckpoint) throws
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func train(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLDecisionTreeRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func train(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeRegressor.ModelParameters = .init(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLDecisionTreeRegressor>
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func makeTrainingSession(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLDecisionTreeRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func makeTrainingSession(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeRegressor.ModelParameters = .init(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLDecisionTreeRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func restoreTrainingSession(sessionParameters: CreateML.MLTrainingSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLDecisionTreeRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func resume(_ session: CreateML.MLTrainingSession<CreateML.MLDecisionTreeRegressor>) throws -> CreateML.MLJob<CreateML.MLDecisionTreeRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func predictions(from data: TabularData.DataFrame) throws -> TabularData.AnyColumn
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func predictions(from data: CreateML.MLDataTable) throws -> CreateML.MLUntypedColumn
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func evaluation(on labeledData: TabularData.DataFrame) -> CreateML.MLRegressorMetrics
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func evaluation(on labeledData: CreateML.MLDataTable) -> CreateML.MLRegressorMetrics
  public func write(to fileURL: Foundation.URL, metadata: CreateML.MLModelMetadata? = nil) throws
  public func write(toFile path: Swift.String, metadata: CreateML.MLModelMetadata? = nil) throws
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDecisionTreeRegressor : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
extension CreateML.MLDecisionTreeRegressor.ModelParameters {
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public enum ValidationData {
    case split(strategy: CreateML.MLSplitStrategy)
    @available(macOS, introduced: 11.0, deprecated: 14.0)
    @available(iOS, introduced: 15.0, deprecated: 17.0)
    @available(tvOS, introduced: 16.0, deprecated: 17.0)
    case table(CreateML.MLDataTable)
    @available(macOS 13.0, iOS 16.0, tvOS 16.0, *)
    case dataFrame(TabularData.DataFrame)
    case none
  }
}
@available(*, unavailable)
extension CreateML.MLDecisionTreeRegressor.ModelParameters.ValidationData : Swift.Sendable {
}
extension CreateML.MLRandomForestClassifier.ModelParameters {
  @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
  public enum ValidationData {
    case split(strategy: CreateML.MLSplitStrategy)
    @available(macOS, introduced: 10.15, deprecated: 14.0)
    @available(iOS, introduced: 15.0, deprecated: 17.0)
    @available(tvOS, introduced: 16.0, deprecated: 17.0)
    case table(CreateML.MLDataTable)
    @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
    case dataFrame(TabularData.DataFrame)
    case none
  }
}
@available(*, unavailable)
extension CreateML.MLRandomForestClassifier.ModelParameters.ValidationData : Swift.Sendable {
}
extension CreateML.MLLinearRegressor {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct ModelParameters {
    @available(macOS, introduced: 10.14, deprecated: 11.0, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public var validationData: CreateML.MLDataTable? {
      get
      set
    }
    @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
    public var validation: CreateML.MLLinearRegressor.ModelParameters.ValidationData {
      get
      set
    }
    public var maxIterations: Swift.Int
    public var l1Penalty: Swift.Double
    public var l2Penalty: Swift.Double
    public var stepSize: Swift.Double
    public var convergenceThreshold: Swift.Double
    public var featureRescaling: Swift.Bool
    @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
    public init(validation: CreateML.MLLinearRegressor.ModelParameters.ValidationData, maxIterations: Swift.Int = 10, l1Penalty: Swift.Double = 0, l2Penalty: Swift.Double = 0.01, stepSize: Swift.Double = 1.0, convergenceThreshold: Swift.Double = 0.01, featureRescaling: Swift.Bool = true)
    @available(macOS, introduced: 10.14, deprecated: 11.0, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public init(validationData: CreateML.MLDataTable? = nil, maxIterations: Swift.Int = 10, l1Penalty: Swift.Double = 0, l2Penalty: Swift.Double = 0.01, stepSize: Swift.Double = 1.0, convergenceThreshold: Swift.Double = 0.01, featureRescaling: Swift.Bool = true)
  }
}
@available(*, unavailable)
extension CreateML.MLLinearRegressor.ModelParameters : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLinearRegressor.ModelParameters : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLinearRegressor.ModelParameters : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLinearRegressor.ModelParameters : Swift.CustomPlaygroundDisplayConvertible {
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLRegressorMetrics : Swift.Sendable {
  public var error: (any Swift.Error)? {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var maximumError: Swift.Double {
    get
  }
  public var rootMeanSquaredError: Swift.Double {
    get
  }
  public init(maximumError: Swift.Double, rootMeanSquaredError: Swift.Double)
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLRegressorMetrics : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLDataColumn<Element> where Element : CreateML.MLDataValueConvertible {
  public var count: Swift.Int {
    get
  }
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public var isEmpty: Swift.Bool {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public init<S>(_ source: S) where Element == S.Element, S : Swift.Sequence
  public init(repeating repeatedValue: CreateML.MLDataValue, count: Swift.Int)
  public init(repeating repeatedValue: Element, count: Swift.Int)
  public init()
  public mutating func append(contentsOf newColumn: CreateML.MLDataColumn<Element>)
}
@available(*, unavailable)
extension CreateML.MLDataColumn : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn {
  public subscript(mask: CreateML.MLUntypedColumn) -> CreateML.MLDataColumn<Element> {
    get
  }
  public subscript(mask: CreateML.MLDataColumn<Swift.Bool>) -> CreateML.MLDataColumn<Element> {
    get
  }
  public func map<T>(_ lazyTransform: @escaping (Element) -> T?) -> CreateML.MLDataColumn<T> where T : CreateML.MLDataValueConvertible
  public func map<T>(_ lazyTransform: @escaping (Element) -> T) -> CreateML.MLDataColumn<T> where T : CreateML.MLDataValueConvertible
  public func mapMissing<T>(_ lazyTransform: @escaping (Element?) -> T?) -> CreateML.MLDataColumn<T> where T : CreateML.MLDataValueConvertible
  public func map<T>(to type: T.Type) -> CreateML.MLDataColumn<T> where T : CreateML.MLDataValueConvertible
  public func dropMissing() -> CreateML.MLDataColumn<Element>
  public func fillMissing(with value: Element) -> CreateML.MLDataColumn<Element>
  public func dropDuplicates() -> CreateML.MLDataColumn<Element>
  public func prefix(_ maxLength: Swift.Int = 10) -> CreateML.MLDataColumn<Element>
  public func suffix(_ maxLength: Swift.Int = 10) -> CreateML.MLDataColumn<Element>
  public func sort(byIncreasingOrder: Swift.Bool = true) -> CreateML.MLDataColumn<Element>
  public func copy() -> CreateML.MLDataColumn<Element>
  public func materialize() throws -> CreateML.MLDataColumn<Element>
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn {
  public func element(at index: Swift.Int) -> Element?
  public subscript(index: Swift.Int) -> Element {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn {
  public subscript(slice: Swift.Range<Swift.Int>) -> CreateML.MLDataColumn<Element> {
    get
  }
  public subscript<R>(slice: R) -> CreateML.MLDataColumn<Element> where R : Swift.RangeExpression, R.Bound == Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension Swift.Array where Element : CreateML.MLDataValueConvertible {
  public init(_ column: CreateML.MLDataColumn<Element>)
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == Swift.Int {
  public init<T>(column: CreateML.MLDataColumn<T>) where T : CreateML.MLDataValueConvertible
  public func sum() -> Swift.Int?
  public func min() -> Swift.Int?
  public func max() -> Swift.Int?
  @available(macOS, introduced: 10.14, deprecated: 10.15, renamed: "stdev")
  @available(iOS, introduced: 15.0, deprecated: 16.0, renamed: "stdev")
  @available(tvOS, unavailable)
  public func std() -> Swift.Double?
  public func mean() -> Swift.Double?
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == Swift.Double {
  public init<T>(column: CreateML.MLDataColumn<T>) where T : CreateML.MLDataValueConvertible
  public func sum() -> Swift.Double?
  public func min() -> Swift.Double?
  public func max() -> Swift.Double?
  @available(macOS, introduced: 10.14, deprecated: 10.15, renamed: "stdev")
  @available(iOS, introduced: 15.0, deprecated: 16.0, renamed: "stdev")
  @available(tvOS, unavailable)
  public func std() -> Swift.Double?
  public func mean() -> Swift.Double?
}
@available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == Swift.Int {
  public func stdev() -> Swift.Double?
}
@available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == Swift.Double {
  public func stdev() -> Swift.Double?
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == Swift.String {
  public init<T>(column: CreateML.MLDataColumn<T>) where T : CreateML.MLDataValueConvertible
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == CreateML.MLDataValue.SequenceType {
  public init<T>(column: CreateML.MLDataColumn<T>) where T : CreateML.MLDataValueConvertible
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == [Swift.Int] {
  public init<T>(column: CreateML.MLDataColumn<T>) where T : CreateML.MLDataValueConvertible
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == [Swift.Double] {
  public init<T>(column: CreateML.MLDataColumn<T>) where T : CreateML.MLDataValueConvertible
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == [Swift.String] {
  public init<T>(column: CreateML.MLDataColumn<T>) where T : CreateML.MLDataValueConvertible
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn where Element == CreateML.MLDataValue.DictionaryType {
  public init<T>(column: CreateML.MLDataColumn<T>) where T : CreateML.MLDataValueConvertible
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataColumn : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
extension CreateML.MLBoostedTreeClassifier {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct ModelParameters {
    @available(macOS, introduced: 10.14, deprecated: 10.15, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public var validationData: CreateML.MLDataTable? {
      get
      set
    }
    @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
    public var validation: CreateML.MLBoostedTreeClassifier.ModelParameters.ValidationData {
      get
      set
    }
    public var maxDepth: Swift.Int
    public var maxIterations: Swift.Int
    public var minLossReduction: Swift.Double
    public var minChildWeight: Swift.Double
    public var randomSeed: Swift.Int
    public var stepSize: Swift.Double
    public var earlyStoppingRounds: Swift.Int?
    public var rowSubsample: Swift.Double
    public var columnSubsample: Swift.Double
    @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
    public init(validation: CreateML.MLBoostedTreeClassifier.ModelParameters.ValidationData = .split(strategy: .automatic), maxDepth: Swift.Int = 6, maxIterations: Swift.Int = 10, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42, stepSize: Swift.Double = 0.3, earlyStoppingRounds: Swift.Int? = nil, rowSubsample: Swift.Double = 1.0, columnSubsample: Swift.Double = 1.0)
    @available(macOS, introduced: 10.14, deprecated: 10.15, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public init(validationData: CreateML.MLDataTable?, maxDepth: Swift.Int = 6, maxIterations: Swift.Int = 10, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42, stepSize: Swift.Double = 0.3, earlyStoppingRounds: Swift.Int? = nil, rowSubsample: Swift.Double = 1.0, columnSubsample: Swift.Double = 1.0)
  }
}
@available(*, unavailable)
extension CreateML.MLBoostedTreeClassifier.ModelParameters : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLBoostedTreeClassifier.ModelParameters : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.SequenceType {
  public init()
  public init<S>(_ elements: S) where S : Swift.Sequence, S.Element == CreateML.MLDataValue
  public init<S>(_ elements: S) where S : Swift.Sequence, S.Element : CreateML.MLDataValueConvertible
}
@available(*, unavailable)
extension CreateML.MLDataValue.SequenceType : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.SequenceType : Swift.RandomAccessCollection {
  public typealias Element = CreateML.MLDataValue
  public typealias Index = Swift.Int
  public var startIndex: CreateML.MLDataValue.SequenceType.Index {
    get
  }
  public var endIndex: CreateML.MLDataValue.SequenceType.Index {
    get
  }
  public subscript(index: CreateML.MLDataValue.SequenceType.Index) -> CreateML.MLDataValue.SequenceType.Element {
    get
  }
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias Indices = Swift.Range<CreateML.MLDataValue.SequenceType.Index>
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias Iterator = Swift.IndexingIterator<CreateML.MLDataValue.SequenceType>
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias SubSequence = Swift.Slice<CreateML.MLDataValue.SequenceType>
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.SequenceType : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: CreateML.MLDataValue.SequenceType.Element...)
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias ArrayLiteralElement = CreateML.MLDataValue.SequenceType.Element
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.SequenceType : Swift.Equatable {
  public static func == (lhs: CreateML.MLDataValue.SequenceType, rhs: CreateML.MLDataValue.SequenceType) -> Swift.Bool
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.SequenceType : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.SequenceType : CreateML.MLDataValueConvertible {
  public static var dataValueType: CreateML.MLDataValue.ValueType {
    get
  }
  public init?(from dataValue: CreateML.MLDataValue)
  public var dataValue: CreateML.MLDataValue {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension Swift.Array : CreateML.MLDataValueConvertible where Element : CreateML.MLDataValueConvertible {
  public static var dataValueType: CreateML.MLDataValue.ValueType {
    get
  }
  public init?(from dataValue: CreateML.MLDataValue)
  public var dataValue: CreateML.MLDataValue {
    get
  }
}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
public struct MLTrainingSessionParameters : Swift.Sendable {
  public let sessionDirectory: Foundation.URL?
  public var reportInterval: Swift.Int
  public var checkpointInterval: Swift.Int
  public var iterations: Swift.Int
  public init(sessionDirectory: Foundation.URL? = nil, reportInterval: Swift.Int = 5, checkpointInterval: Swift.Int = 10, iterations: Swift.Int = 1000)
}
@_hasMissingDesignatedInitializers @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
final public class MLTrainingSession<Task> {
  final public let parameters: CreateML.MLTrainingSessionParameters
  final public var date: Foundation.Date {
    get
  }
  final public var phase: CreateML.MLPhase {
    get
  }
  final public var iteration: Swift.Int {
    get
  }
  final public var checkpoints: [CreateML.MLCheckpoint] {
    get
  }
  final public func removeCheckpoints(_ predicate: (CreateML.MLCheckpoint) -> Swift.Bool) throws
  final public func reuseExtractedFeatures(from session: CreateML.MLTrainingSession<Task>) throws
  @objc deinit
}
@available(macOS 14.0, iOS 17.0, tvOS 17.0, *)
extension CreateML.MLTrainingSession : @unchecked Swift.Sendable {
}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
public struct MLProgress : Swift.Codable {
  public var elapsedTime: Foundation.TimeInterval
  public var phase: CreateML.MLPhase
  public var itemCount: Swift.Int
  public var totalItemCount: Swift.Int?
  public var metrics: [CreateML.MLProgress.Metric : Any]
  public init(phase: CreateML.MLPhase)
  public init?(progress: Foundation.Progress)
  public enum Metric : Swift.String, Swift.Codable, Swift.Hashable, Swift.CaseIterable, Swift.Sendable {
    case loss
    case contentLoss
    case styleLoss
    case accuracy
    case validationLoss
    case validationAccuracy
    case stylizedImageURL
    @available(macOS 14.0, iOS 17.0, tvOS 17.0, *)
    case rootMeanSquaredError
    @available(macOS 14.0, iOS 17.0, tvOS 17.0, *)
    case maximumError
    @available(macOS 14.0, iOS 17.0, tvOS 17.0, *)
    case validationRootMeanSquaredError
    @available(macOS 14.0, iOS 17.0, tvOS 17.0, *)
    case validationMaximumError
    public static var allCases: [CreateML.MLProgress.Metric] {
      get
    }
    public init?(rawValue: Swift.String)
    @available(iOS 15.0, tvOS 16.0, macOS 11.0, *)
    public typealias AllCases = [CreateML.MLProgress.Metric]
    @available(iOS 15.0, tvOS 16.0, macOS 11.0, *)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(*, unavailable)
extension CreateML.MLProgress : Swift.Sendable {
}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLProgress {
  public static let elapsedTimeKey: Foundation.ProgressUserInfoKey
  public static let phaseKey: Foundation.ProgressUserInfoKey
  public static let itemCountKey: Foundation.ProgressUserInfoKey
  public static let totalItemCountKey: Foundation.ProgressUserInfoKey
  public static let lossKey: Foundation.ProgressUserInfoKey
  public static let contentLossKey: Foundation.ProgressUserInfoKey
  public static let styleLossKey: Foundation.ProgressUserInfoKey
  public static let accuracyKey: Foundation.ProgressUserInfoKey
  public static let validationLossKey: Foundation.ProgressUserInfoKey
  public static let validationAccuracyKey: Foundation.ProgressUserInfoKey
  public static let stylizedImageKey: Foundation.ProgressUserInfoKey
  @available(macOS 14.0, iOS 17.0, tvOS 17.0, *)
  public static let rootMeanSquaredErrorKey: Foundation.ProgressUserInfoKey
  @available(macOS 14.0, iOS 17.0, tvOS 17.0, *)
  public static let maximumErrorKey: Foundation.ProgressUserInfoKey
  @available(macOS 14.0, iOS 17.0, tvOS 17.0, *)
  public static let validationRootMeanSquaredErrorKey: Foundation.ProgressUserInfoKey
  @available(macOS 14.0, iOS 17.0, tvOS 17.0, *)
  public static let validationMaximumErrorKey: Foundation.ProgressUserInfoKey
}
extension CreateML.MLRandomForestClassifier {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct ModelParameters {
    @available(macOS, introduced: 10.14, deprecated: 10.15, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public var validationData: CreateML.MLDataTable? {
      get
      set
    }
    @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
    public var validation: CreateML.MLRandomForestClassifier.ModelParameters.ValidationData {
      get
      set
    }
    public var maxDepth: Swift.Int
    public var maxIterations: Swift.Int
    public var minLossReduction: Swift.Double
    public var minChildWeight: Swift.Double
    public var randomSeed: Swift.Int
    public var rowSubsample: Swift.Double
    public var columnSubsample: Swift.Double
    @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
    public init(validation: CreateML.MLRandomForestClassifier.ModelParameters.ValidationData = .split(strategy: .automatic), maxDepth: Swift.Int = 6, maxIterations: Swift.Int = 10, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42, rowSubsample: Swift.Double = 0.8, columnSubsample: Swift.Double = 0.8)
    @available(macOS, introduced: 10.14, deprecated: 10.15, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public init(validationData: CreateML.MLDataTable?, maxDepth: Swift.Int = 6, maxIterations: Swift.Int = 10, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42, rowSubsample: Swift.Double = 0.8, columnSubsample: Swift.Double = 0.8)
  }
}
@available(*, unavailable)
extension CreateML.MLRandomForestClassifier.ModelParameters : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLRandomForestClassifier.ModelParameters : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
extension CreateML.MLRandomForestRegressor.ModelParameters {
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public enum ValidationData {
    case split(strategy: CreateML.MLSplitStrategy)
    @available(macOS, introduced: 11.0, deprecated: 14.0)
    @available(iOS, introduced: 15.0, deprecated: 17.0)
    @available(tvOS, introduced: 16.0, deprecated: 17.0)
    case table(CreateML.MLDataTable)
    @available(macOS 13.0, iOS 16.0, tvOS 16.0, *)
    case dataFrame(TabularData.DataFrame)
    case none
  }
}
@available(*, unavailable)
extension CreateML.MLRandomForestRegressor.ModelParameters.ValidationData : Swift.Sendable {
}
extension CreateML.MLClassifierMetrics {
  @available(macOS, introduced: 10.15, deprecated: 14.0, message: "Evaluation from MLDataTable is deprecated.")
  @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Evaluation from MLDataTable is deprecated.")
  @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Evaluation from MLDataTable is deprecated.")
  public static func __evaluation(on table: CreateML.MLDataTable, labelColumn: Swift.String, predictionColumn: Swift.String, classes: [Swift.String]) throws -> CreateML.MLClassifierMetrics
}
extension CreateML.MLRegressorMetrics {
  @available(macOS, introduced: 10.15, deprecated: 14.0, message: "Evaluation from MLDataTable is deprecated.")
  @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Evaluation from MLDataTable is deprecated.")
  @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Evaluation from MLDataTable is deprecated.")
  public static func __evaluation(on table: CreateML.MLDataTable, targetColumn: Swift.String, predictionColumn: Swift.String) throws -> CreateML.MLRegressorMetrics
}
@available(*, unavailable)
extension CreateML.MLDataValue.MultiArrayType : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.MultiArrayType : Swift.Equatable {
  public init(shape: [Swift.Int])
  public init(_ contents: CoreML.MLMultiArray)
  public subscript(index: Swift.Int) -> Swift.Double {
    get
  }
  public subscript(index: [Swift.Int]) -> Swift.Double {
    get
  }
  public var mlMultiArray: CoreML.MLMultiArray {
    get
  }
  public static func == (lhs: CreateML.MLDataValue.MultiArrayType, rhs: CreateML.MLDataValue.MultiArrayType) -> Swift.Bool
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.MultiArrayType : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.MultiArrayType : CreateML.MLDataValueConvertible {
  public static var dataValueType: CreateML.MLDataValue.ValueType {
    get
  }
  public init?(from dataValue: CreateML.MLDataValue)
  public init()
  public var dataValue: CreateML.MLDataValue {
    get
  }
}
extension Swift.Int32 {
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static var mlMultiArrayDataType: CoreML.MLMultiArrayDataType {
    get
  }
}
extension Swift.Float {
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static var mlMultiArrayDataType: CoreML.MLMultiArrayDataType {
    get
  }
}
extension Swift.Double {
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static var mlMultiArrayDataType: CoreML.MLMultiArrayDataType {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable {
  public struct Row {
    public typealias Keys = CreateML.MLDataTable.ColumnNames
    public typealias Key = CreateML.MLDataTable.Row.Keys.Element
    public typealias Value = CreateML.MLDataTable.Row.Values.Element
    public var keys: CreateML.MLDataTable.Row.Keys {
      get
    }
    public var values: CreateML.MLDataTable.Row.Values {
      get
    }
    public subscript(name: CreateML.MLDataTable.Row.Key) -> CreateML.MLDataTable.Row.Value? {
      get
    }
    public subscript<T>(name: CreateML.MLDataTable.Row.Key, type: T.Type) -> T? where T : CreateML.MLDataValueConvertible {
      get
    }
  }
}
@available(*, unavailable)
extension CreateML.MLDataTable.Row : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.Row : Swift.Equatable {
  public static func == (lhs: CreateML.MLDataTable.Row, rhs: CreateML.MLDataTable.Row) -> Swift.Bool
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.Row : Swift.Collection {
  public typealias Element = (CreateML.MLDataTable.Row.Key, CreateML.MLDataTable.Row.Value)
  public typealias Index = Swift.Int
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public func index(forKey key: CreateML.MLDataTable.Row.Key) -> CreateML.MLDataTable.Row.Index?
  public subscript(position: Swift.Int) -> (CreateML.MLDataTable.Row.Key, CreateML.MLDataTable.Row.Value) {
    get
  }
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias Indices = Swift.DefaultIndices<CreateML.MLDataTable.Row>
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias Iterator = Swift.IndexingIterator<CreateML.MLDataTable.Row>
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias SubSequence = Swift.Slice<CreateML.MLDataTable.Row>
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.Row : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.Row {
  public struct Values : Swift.RandomAccessCollection {
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(i: Swift.Int) -> CreateML.MLDataValue {
      get
    }
    @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
    public typealias Element = CreateML.MLDataValue
    @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
    public typealias Index = Swift.Int
    @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
    public typealias Indices = Swift.Range<Swift.Int>
    @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
    public typealias Iterator = Swift.IndexingIterator<CreateML.MLDataTable.Row.Values>
    @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
    public typealias SubSequence = Swift.Slice<CreateML.MLDataTable.Row.Values>
  }
}
@available(*, unavailable)
extension CreateML.MLDataTable.Row.Values : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.Row.Values : Swift.Equatable {
  public static func == (lhs: CreateML.MLDataTable.Row.Values, rhs: CreateML.MLDataTable.Row.Values) -> Swift.Bool
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.Row.Values : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
extension CreateML.MLDataTable {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public func group<S>(columnsNamed: Swift.String..., aggregators: S) -> CreateML.MLDataTable where S : Swift.Sequence, S.Element == CreateML.MLDataTable.Aggregator
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct Aggregator : Swift.Sendable {
    public var operations: [CreateML.MLDataTable.Aggregator.Operations]
    public var columnName: Swift.String
    public init(operations: CreateML.MLDataTable.Aggregator.Operations..., of columnNamed: Swift.String)
    public enum Operations : Swift.Sendable {
      case min
      case max
      case sum
      case mean
      case stdev
      case count
      case distinctCount
      case variance
      case sequenceMerge
      case randomlySelectOne
      case dictionaryMerge(valueColumn: Swift.String)
      case argmin(outputColumn: Swift.String)
      case argmax(outputColumn: Swift.String)
    }
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLClassifierMetrics {
  @available(macOS, introduced: 10.14, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public init(classificationError: Swift.Double, confusion: CreateML.MLDataTable, precisionRecall: CreateML.MLDataTable)
  public var error: (any Swift.Error)? {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var classificationError: Swift.Double {
    get
  }
  @available(macOS, introduced: 10.14, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public var confusion: CreateML.MLDataTable {
    get
  }
  @available(macOS 14, iOS 17.0, tvOS 17.0, *)
  public var confusionDataFrame: TabularData.DataFrame {
    get
  }
  @available(macOS, introduced: 10.14, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public var precisionRecall: CreateML.MLDataTable {
    get
  }
  @available(macOS 14.0, iOS 17.0, tvOS 17.0, *)
  public var precisionRecallDataFrame: TabularData.DataFrame {
    get
  }
}
@available(*, unavailable)
extension CreateML.MLClassifierMetrics : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLClassifierMetrics : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLRandomForestClassifier : @unchecked Swift.Sendable {
  public var model: CoreML.MLModel {
    get
    @available(macOS, introduced: 10.14, deprecated: 14.0, message: "Setting the model is not supported.")
    @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Setting the model is not supported.")
    @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Setting the model is not supported.")
    set
  }
  public var targetColumn: Swift.String
  public var featureColumns: [Swift.String]
  public let modelParameters: CreateML.MLRandomForestClassifier.ModelParameters
  public var trainingMetrics: CreateML.MLClassifierMetrics {
    get
  }
  public var validationMetrics: CreateML.MLClassifierMetrics {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static let _defaultSessionParameters: CreateML.MLTrainingSessionParameters
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestClassifier.ModelParameters = ModelParameters(validation: .split(strategy: .automatic))) throws
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(tvOS, unavailable)
  public init(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestClassifier.ModelParameters = ModelParameters(validationData: nil)) throws
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(checkpoint: CreateML.MLCheckpoint) throws
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func train(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestClassifier.ModelParameters = ModelParameters(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLRandomForestClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func train(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestClassifier.ModelParameters = ModelParameters(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLRandomForestClassifier>
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func makeTrainingSession(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestClassifier.ModelParameters = .init(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLRandomForestClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func makeTrainingSession(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLRandomForestClassifier.ModelParameters = .init(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLRandomForestClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func restoreTrainingSession(sessionParameters: CreateML.MLTrainingSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLRandomForestClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func resume(_ session: CreateML.MLTrainingSession<CreateML.MLRandomForestClassifier>) throws -> CreateML.MLJob<CreateML.MLRandomForestClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func predictions(from data: TabularData.DataFrame) throws -> TabularData.AnyColumn
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func predictions(from data: CreateML.MLDataTable) throws -> CreateML.MLUntypedColumn
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func evaluation(on labeledData: TabularData.DataFrame) -> CreateML.MLClassifierMetrics
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func evaluation(on labeledData: CreateML.MLDataTable) -> CreateML.MLClassifierMetrics
  public func write(to fileURL: Foundation.URL, metadata: CreateML.MLModelMetadata? = nil) throws
  public func write(toFile path: Swift.String, metadata: CreateML.MLModelMetadata? = nil) throws
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLRandomForestClassifier : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLBoostedTreeRegressor : @unchecked Swift.Sendable {
  public var model: CoreML.MLModel {
    get
    @available(macOS, introduced: 10.14, deprecated: 14.0, message: "Setting the model is not supported.")
    @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Setting the model is not supported.")
    @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Setting the model is not supported.")
    set
  }
  public var targetColumn: Swift.String
  public var featureColumns: [Swift.String]
  public let modelParameters: CreateML.MLBoostedTreeRegressor.ModelParameters
  public var trainingMetrics: CreateML.MLRegressorMetrics {
    get
  }
  public var validationMetrics: CreateML.MLRegressorMetrics {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static let _defaultSessionParameters: CreateML.MLTrainingSessionParameters
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic))) throws
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(tvOS, unavailable)
  public init(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeRegressor.ModelParameters = ModelParameters(validationData: nil)) throws
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(checkpoint: CreateML.MLCheckpoint) throws
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func train(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLBoostedTreeRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func train(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLBoostedTreeRegressor>
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func makeTrainingSession(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLBoostedTreeRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func makeTrainingSession(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeRegressor.ModelParameters = .init(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLBoostedTreeRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func restoreTrainingSession(sessionParameters: CreateML.MLTrainingSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLBoostedTreeRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func resume(_ session: CreateML.MLTrainingSession<CreateML.MLBoostedTreeRegressor>) throws -> CreateML.MLJob<CreateML.MLBoostedTreeRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func predictions(from data: TabularData.DataFrame) throws -> TabularData.AnyColumn
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func predictions(from data: CreateML.MLDataTable) throws -> CreateML.MLUntypedColumn
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func evaluation(on labeledData: TabularData.DataFrame) -> CreateML.MLRegressorMetrics
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func evaluation(on labeledData: CreateML.MLDataTable) -> CreateML.MLRegressorMetrics
  public func write(to fileURL: Foundation.URL, metadata: CreateML.MLModelMetadata? = nil) throws
  public func write(toFile path: Swift.String, metadata: CreateML.MLModelMetadata? = nil) throws
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLBoostedTreeRegressor : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public enum MLDataValue {
  case int(Swift.Int)
  case double(Swift.Double)
  case string(Swift.String)
  case sequence(CreateML.MLDataValue.SequenceType)
  case dictionary(CreateML.MLDataValue.DictionaryType)
  case multiArray(CreateML.MLDataValue.MultiArrayType)
  case invalid
  public var type: CreateML.MLDataValue.ValueType {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var doubleValue: Swift.Double? {
    get
  }
  public var stringValue: Swift.String? {
    get
  }
  public var sequenceValue: CreateML.MLDataValue.SequenceType? {
    get
  }
  public var dictionaryValue: CreateML.MLDataValue.DictionaryType? {
    get
  }
  public var multiArrayValue: CreateML.MLDataValue.MultiArrayType? {
    get
  }
  public struct SequenceType {
  }
  public struct DictionaryType {
  }
  public struct MultiArrayType {
  }
}
@available(*, unavailable)
extension CreateML.MLDataValue : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue {
  public enum ValueType {
    case int
    case double
    case string
    case sequence
    case dictionary
    case multiArray
    case invalid
    public static func == (a: CreateML.MLDataValue.ValueType, b: CreateML.MLDataValue.ValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.ValueType : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue : Swift.Hashable {
  public static func == (left: CreateML.MLDataValue, right: CreateML.MLDataValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.DictionaryType {
  public typealias Key = CreateML.MLDataValue
  public typealias Value = CreateML.MLDataValue
  public init()
  public init(_ contents: [CreateML.MLDataValue : CreateML.MLDataValue])
  public init<S>(uniqueKeysWithValues keysAndValues: S) where S : Swift.Sequence, S.Element == (CreateML.MLDataValue, CreateML.MLDataValue)
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public subscript(key: CreateML.MLDataValue.DictionaryType.Key) -> CreateML.MLDataValue.DictionaryType.Value? {
    get
  }
}
@available(*, unavailable)
extension CreateML.MLDataValue.DictionaryType : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.DictionaryType : Swift.Collection {
  public struct Index : Swift.Comparable {
    public static func == (lhs: CreateML.MLDataValue.DictionaryType.Index, rhs: CreateML.MLDataValue.DictionaryType.Index) -> Swift.Bool
    public static func < (lhs: CreateML.MLDataValue.DictionaryType.Index, rhs: CreateML.MLDataValue.DictionaryType.Index) -> Swift.Bool
  }
  public typealias Element = (key: CreateML.MLDataValue, value: CreateML.MLDataValue)
  public var startIndex: CreateML.MLDataValue.DictionaryType.Index {
    get
  }
  public var endIndex: CreateML.MLDataValue.DictionaryType.Index {
    get
  }
  public subscript(index: CreateML.MLDataValue.DictionaryType.Index) -> CreateML.MLDataValue.DictionaryType.Element {
    get
  }
  public func index(after i: CreateML.MLDataValue.DictionaryType.Index) -> CreateML.MLDataValue.DictionaryType.Index
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias Indices = Swift.DefaultIndices<CreateML.MLDataValue.DictionaryType>
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias Iterator = Swift.IndexingIterator<CreateML.MLDataValue.DictionaryType>
  @available(iOS 15.0, tvOS 16.0, macOS 10.14, *)
  public typealias SubSequence = Swift.Slice<CreateML.MLDataValue.DictionaryType>
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.DictionaryType : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.DictionaryType : Swift.Equatable {
  public static func == (lhs: CreateML.MLDataValue.DictionaryType, rhs: CreateML.MLDataValue.DictionaryType) -> Swift.Bool
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.DictionaryType : CreateML.MLDataValueConvertible {
  public static var dataValueType: CreateML.MLDataValue.ValueType {
    get
  }
  public init?(from dataValue: CreateML.MLDataValue)
  public var dataValue: CreateML.MLDataValue {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension Swift.Dictionary : CreateML.MLDataValueConvertible where Key : CreateML.MLDataValueConvertible, Value : CreateML.MLDataValueConvertible {
  public static var dataValueType: CreateML.MLDataValue.ValueType {
    get
  }
  public init?(from dataValue: CreateML.MLDataValue)
  public init?(from dictionaryType: CreateML.MLDataValue.DictionaryType)
  public var dataValue: CreateML.MLDataValue {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public func timestampSeed() -> Swift.Int
extension CreateML.MLDataTable {
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public func randomSplitBySequence(proportion: Swift.Double, by sequenceIdentifierColumn: Swift.String, on column: Swift.String, seed: Swift.Int = 1) -> (CreateML.MLDataTable, remaining: CreateML.MLDataTable)
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public func randomSplit(by proportion: Swift.Double, seed: Swift.Int = 1) -> (CreateML.MLDataTable, CreateML.MLDataTable)
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public func stratifiedSplit(proportions: [Swift.Double], on column: Swift.String, seed: Swift.Int = timestampSeed()) throws -> CreateML.MLDataTable
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public func stratifiedSplit<RNG>(proportions: [Swift.Double], on column: Swift.String, generator: inout RNG) throws -> CreateML.MLDataTable where RNG : Swift.RandomNumberGenerator
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public func stratifiedSplitBySequence<RNG>(proportions: [Swift.Double], by sequenceIdentifierColumn: Swift.String, on column: Swift.String, generator: inout RNG) throws -> CreateML.MLDataTable where RNG : Swift.RandomNumberGenerator
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public func stratifiedSplitBySequence(proportions: [Swift.Double], by sequenceIdentifierColumn: Swift.String, on column: Swift.String, seed: Swift.Int = timestampSeed()) throws -> CreateML.MLDataTable
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLDecisionTreeClassifier : @unchecked Swift.Sendable {
  public var model: CoreML.MLModel {
    get
    @available(macOS, introduced: 10.14, deprecated: 14.0, message: "Setting the model is not supported.")
    @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Setting the model is not supported.")
    @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Setting the model is not supported.")
    set
  }
  public var targetColumn: Swift.String
  public var featureColumns: [Swift.String]
  public let modelParameters: CreateML.MLDecisionTreeClassifier.ModelParameters
  public var trainingMetrics: CreateML.MLClassifierMetrics {
    get
  }
  public var validationMetrics: CreateML.MLClassifierMetrics {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static let _defaultSessionParameters: CreateML.MLTrainingSessionParameters
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeClassifier.ModelParameters = ModelParameters(validation: .split(strategy: .automatic))) throws
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(tvOS, unavailable)
  public init(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeClassifier.ModelParameters = ModelParameters(validationData: nil)) throws
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(checkpoint: CreateML.MLCheckpoint) throws
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func train(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeClassifier.ModelParameters = ModelParameters(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLDecisionTreeClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func train(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeClassifier.ModelParameters = ModelParameters(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLDecisionTreeClassifier>
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func makeTrainingSession(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeClassifier.ModelParameters = .init(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLDecisionTreeClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func makeTrainingSession(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLDecisionTreeClassifier.ModelParameters = .init(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLDecisionTreeClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func restoreTrainingSession(sessionParameters: CreateML.MLTrainingSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLDecisionTreeClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func resume(_ session: CreateML.MLTrainingSession<CreateML.MLDecisionTreeClassifier>) throws -> CreateML.MLJob<CreateML.MLDecisionTreeClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func predictions(from data: TabularData.DataFrame) throws -> TabularData.AnyColumn
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func predictions(from data: CreateML.MLDataTable) throws -> CreateML.MLUntypedColumn
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func evaluation(on labeledData: TabularData.DataFrame) -> CreateML.MLClassifierMetrics
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func evaluation(on labeledData: CreateML.MLDataTable) -> CreateML.MLClassifierMetrics
  public func write(to fileURL: Foundation.URL, metadata: CreateML.MLModelMetadata? = nil) throws
  public func write(toFile path: Swift.String, metadata: CreateML.MLModelMetadata? = nil) throws
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDecisionTreeClassifier : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
public enum MLPhase : Swift.String, Swift.Codable, Swift.Sendable {
  case initialized
  case extractingFeatures
  case training
  case evaluating
  case inferencing
  public init?(rawValue: Swift.String)
  @available(iOS 15.0, tvOS 16.0, macOS 11.0, *)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension CreateML.MLLinearRegressor.ModelParameters {
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public enum ValidationData {
    case split(strategy: CreateML.MLSplitStrategy)
    @available(macOS, introduced: 11.0, deprecated: 14.0)
    @available(iOS, introduced: 15.0, deprecated: 17.0)
    @available(tvOS, introduced: 16.0, deprecated: 17.0)
    case table(CreateML.MLDataTable)
    @available(macOS 13.0, iOS 16.0, tvOS 16.0, *)
    case dataFrame(TabularData.DataFrame)
    case none
  }
}
extension CreateML.MLBoostedTreeRegressor.ModelParameters {
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public enum ValidationData {
    case split(strategy: CreateML.MLSplitStrategy)
    @available(macOS, introduced: 11.0, deprecated: 14.0)
    @available(iOS, introduced: 15.0, deprecated: 17.0)
    @available(tvOS, introduced: 16.0, deprecated: 17.0)
    case table(CreateML.MLDataTable)
    @available(macOS 13.0, iOS 16.0, tvOS 16.0, *)
    case dataFrame(TabularData.DataFrame)
    case none
  }
}
@available(*, unavailable)
extension CreateML.MLBoostedTreeRegressor.ModelParameters.ValidationData : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLDataTable {
  public var error: (any Swift.Error)? {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var size: (rows: Swift.Int, columns: Swift.Int) {
    get
  }
  public var columnTypes: [Swift.String : CreateML.MLDataValue.ValueType] {
    get
  }
  public init()
  public init(namedColumns: [Swift.String : CreateML.MLUntypedColumn]) throws
  public init(dictionary: [Swift.String : any CreateML.MLDataValueConvertible]) throws
  public subscript(columnName: Swift.String) -> CreateML.MLUntypedColumn {
    get
    set(newValue)
  }
  public subscript<Element>(columnName: Swift.String) -> CreateML.MLDataColumn<Element> where Element : CreateML.MLDataValueConvertible {
    get
    set(newValue)
  }
  public subscript<T>(columnName: Swift.String, columnType: T.Type) -> CreateML.MLDataColumn<T>? where T : CreateML.MLDataValueConvertible {
    get
  }
  public subscript<S>(columnNames: S) -> CreateML.MLDataTable where S : Swift.Sequence, S.Element == Swift.String {
    get
  }
  public subscript(slice: Swift.Range<Swift.Int>) -> CreateML.MLDataTable {
    get
  }
  public subscript<R>(slice: R) -> CreateML.MLDataTable where R : Swift.RangeExpression, R.Bound == Swift.Int {
    get
  }
  public mutating func addColumn(_ newColumn: CreateML.MLUntypedColumn, named: Swift.String)
  public mutating func addColumn<Element>(_ newColumn: CreateML.MLDataColumn<Element>, named: Swift.String) where Element : CreateML.MLDataValueConvertible
  public mutating func removeColumn(named: Swift.String)
  public mutating func renameColumn(named: Swift.String, to: Swift.String)
  public mutating func append(contentsOf newTable: CreateML.MLDataTable)
  public func randomSample(by proportion: Swift.Double, seed: Swift.Int = 42) -> CreateML.MLDataTable
  public func intersect<T>(_ values: T..., of columnNamed: Swift.String) -> CreateML.MLDataTable where T : CreateML.MLDataValueConvertible
  public func exclude<T>(_ values: T..., of columnNamed: Swift.String) -> CreateML.MLDataTable where T : CreateML.MLDataValueConvertible
  public func join(with: CreateML.MLDataTable, on columnsNamed: Swift.String..., type: CreateML.MLDataTable.JoinType = .inner) -> CreateML.MLDataTable
  public enum JoinType : Swift.Sendable {
    case inner
    case outer
    case left
    case right
    public static func == (a: CreateML.MLDataTable.JoinType, b: CreateML.MLDataTable.JoinType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public subscript(mask: CreateML.MLUntypedColumn) -> CreateML.MLDataTable {
    get
  }
  public subscript(mask: CreateML.MLDataColumn<Swift.Bool>) -> CreateML.MLDataTable {
    get
  }
  public func map<T>(_ lazyTransform: @escaping (CreateML.MLDataTable.Row) -> T?) -> CreateML.MLDataColumn<T> where T : CreateML.MLDataValueConvertible
  public func map<T>(_ lazyTransform: @escaping (CreateML.MLDataTable.Row) -> T) -> CreateML.MLDataColumn<T> where T : CreateML.MLDataValueConvertible
  public func dropMissing() -> CreateML.MLDataTable
  public func fillMissing(columnNamed: Swift.String, with value: CreateML.MLDataValue) -> CreateML.MLDataTable
  public func dropDuplicates() -> CreateML.MLDataTable
  public func prefix(_ maxLength: Swift.Int = 10) -> CreateML.MLDataTable
  public func suffix(_ maxLength: Swift.Int = 10) -> CreateML.MLDataTable
  public func sort(columnNamed: Swift.String, byIncreasingOrder: Swift.Bool = true) -> CreateML.MLDataTable
  public func expand(columnNamed: Swift.String, to: Swift.String) -> CreateML.MLDataTable
  public func condense(columnNamed: Swift.String, to: Swift.String) -> CreateML.MLDataTable
}
@available(*, unavailable)
extension CreateML.MLDataTable : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable : Swift.CustomStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var playgroundDescription: Any {
    get
  }
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public protocol MLDataValueConvertible {
  static var dataValueType: CreateML.MLDataValue.ValueType { get }
  init?(from dataValue: CreateML.MLDataValue)
  init()
  var dataValue: CreateML.MLDataValue { get }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension Swift.Int : CreateML.MLDataValueConvertible {
  public static var dataValueType: CreateML.MLDataValue.ValueType {
    get
  }
  public init?(from dataValue: CreateML.MLDataValue)
  public var dataValue: CreateML.MLDataValue {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension Swift.Bool : CreateML.MLDataValueConvertible {
  public static var dataValueType: CreateML.MLDataValue.ValueType {
    get
  }
  public init?(from dataValue: CreateML.MLDataValue)
  public var dataValue: CreateML.MLDataValue {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension Swift.Int64 : CreateML.MLDataValueConvertible {
  public static var dataValueType: CreateML.MLDataValue.ValueType {
    get
  }
  public init?(from dataValue: CreateML.MLDataValue)
  public var dataValue: CreateML.MLDataValue {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension Swift.Double : CreateML.MLDataValueConvertible {
  public static var dataValueType: CreateML.MLDataValue.ValueType {
    get
  }
  public init?(from dataValue: CreateML.MLDataValue)
  public var dataValue: CreateML.MLDataValue {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension Swift.String : CreateML.MLDataValueConvertible {
  public static var dataValueType: CreateML.MLDataValue.ValueType {
    get
  }
  public init?(from dataValue: CreateML.MLDataValue)
  public var dataValue: CreateML.MLDataValue {
    get
  }
}
extension CreateML.MLLogisticRegressionClassifier.ModelParameters {
  @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
  public enum ValidationData {
    case split(strategy: CreateML.MLSplitStrategy)
    @available(macOS, introduced: 10.15, deprecated: 14.0)
    @available(iOS, introduced: 15.0, deprecated: 17.0)
    @available(tvOS, introduced: 16.0, deprecated: 17.0)
    case table(CreateML.MLDataTable)
    @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
    case dataFrame(TabularData.DataFrame)
    case none
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLBoostedTreeClassifier : @unchecked Swift.Sendable {
  public var model: CoreML.MLModel {
    get
    @available(macOS, introduced: 10.14, deprecated: 14.0, message: "Setting the model is not supported.")
    @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Setting the model is not supported.")
    @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Setting the model is not supported.")
    set
  }
  public var targetColumn: Swift.String
  public var featureColumns: [Swift.String]
  public let modelParameters: CreateML.MLBoostedTreeClassifier.ModelParameters
  public var trainingMetrics: CreateML.MLClassifierMetrics {
    get
  }
  public var validationMetrics: CreateML.MLClassifierMetrics {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static let _defaultSessionParameters: CreateML.MLTrainingSessionParameters
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeClassifier.ModelParameters = ModelParameters(validation: .split(strategy: .automatic))) throws
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(tvOS, unavailable)
  public init(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeClassifier.ModelParameters = ModelParameters(validationData: nil)) throws
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(checkpoint: CreateML.MLCheckpoint) throws
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func train(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeClassifier.ModelParameters = ModelParameters(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLBoostedTreeClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func train(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeClassifier.ModelParameters = ModelParameters(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLBoostedTreeClassifier>
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func makeTrainingSession(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeClassifier.ModelParameters = .init(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLBoostedTreeClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func makeTrainingSession(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLBoostedTreeClassifier.ModelParameters = .init(), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLBoostedTreeClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func restoreTrainingSession(sessionParameters: CreateML.MLTrainingSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLBoostedTreeClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func resume(_ session: CreateML.MLTrainingSession<CreateML.MLBoostedTreeClassifier>) throws -> CreateML.MLJob<CreateML.MLBoostedTreeClassifier>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func predictions(from data: TabularData.DataFrame) throws -> TabularData.AnyColumn
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func predictions(from data: CreateML.MLDataTable) throws -> CreateML.MLUntypedColumn
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func evaluation(on labeledData: TabularData.DataFrame) -> CreateML.MLClassifierMetrics
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func evaluation(on labeledData: CreateML.MLDataTable) -> CreateML.MLClassifierMetrics
  public func write(to fileURL: Foundation.URL, metadata: CreateML.MLModelMetadata? = nil) throws
  public func write(toFile path: Swift.String, metadata: CreateML.MLModelMetadata? = nil) throws
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLBoostedTreeClassifier : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLLinearRegressor : @unchecked Swift.Sendable {
  public var model: CoreML.MLModel {
    get
    @available(macOS, introduced: 10.14, deprecated: 14.0, message: "Setting the model is not supported.")
    @available(iOS, introduced: 15.0, deprecated: 17.0, message: "Setting the model is not supported.")
    @available(tvOS, introduced: 16.0, deprecated: 17.0, message: "Setting the model is not supported.")
    set
  }
  public var targetColumn: Swift.String
  public var featureColumns: [Swift.String]
  public let modelParameters: CreateML.MLLinearRegressor.ModelParameters
  public var trainingMetrics: CreateML.MLRegressorMetrics {
    get
  }
  public var validationMetrics: CreateML.MLRegressorMetrics {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static let _defaultSessionParameters: CreateML.MLTrainingSessionParameters
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLinearRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic))) throws
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable when initializing.")
  @available(tvOS, unavailable)
  public init(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLinearRegressor.ModelParameters = ModelParameters(validationData: nil)) throws
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public init(checkpoint: CreateML.MLCheckpoint) throws
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func train(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLinearRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLLinearRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func train(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLinearRegressor.ModelParameters = .init(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLJob<CreateML.MLLinearRegressor>
  @available(macOS, introduced: 12.0, deprecated: 14.0)
  @available(iOS, introduced: 15.0, deprecated: 17.0)
  @available(tvOS, introduced: 16.0, deprecated: 17.0)
  public static func makeTrainingSession(trainingData: CreateML.MLDataTable, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLinearRegressor.ModelParameters = ModelParameters(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLLinearRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func makeTrainingSession(trainingData: TabularData.DataFrame, targetColumn: Swift.String, featureColumns: [Swift.String]? = nil, parameters: CreateML.MLLinearRegressor.ModelParameters = .init(validation: .split(strategy: .automatic)), sessionParameters: CreateML.MLTrainingSessionParameters = _defaultSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLLinearRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func restoreTrainingSession(sessionParameters: CreateML.MLTrainingSessionParameters) throws -> CreateML.MLTrainingSession<CreateML.MLLinearRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public static func resume(_ session: CreateML.MLTrainingSession<CreateML.MLLinearRegressor>) throws -> CreateML.MLJob<CreateML.MLLinearRegressor>
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func predictions(from data: TabularData.DataFrame) throws -> TabularData.AnyColumn
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func predictions(from data: CreateML.MLDataTable) throws -> CreateML.MLUntypedColumn
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  public func evaluation(on labeledData: TabularData.DataFrame) -> CreateML.MLRegressorMetrics
  @available(macOS, introduced: 10.14, deprecated: 13.0, message: "Use DataFrame instead of MLDataTable.")
  @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use DataFrame instead of MLDataTable.")
  @available(tvOS, unavailable)
  public func evaluation(on labeledData: CreateML.MLDataTable) -> CreateML.MLRegressorMetrics
  public func write(to fileURL: Foundation.URL, metadata: CreateML.MLModelMetadata? = nil) throws
  public func write(toFile path: Swift.String, metadata: CreateML.MLModelMetadata? = nil) throws
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLinearRegressor : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLinearRegressor : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLLinearRegressor : Swift.CustomPlaygroundDisplayConvertible {
  public var playgroundDescription: Any {
    get
  }
}
extension CreateML.MLDecisionTreeClassifier {
  @available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
  public struct ModelParameters {
    public var maxDepth: Swift.Int
    @available(macOS, introduced: 10.14, deprecated: 10.15, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public var validationData: CreateML.MLDataTable? {
      get
      set
    }
    @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
    public var validation: CreateML.MLDecisionTreeClassifier.ModelParameters.ValidationData {
      get
      set
    }
    public var minLossReduction: Swift.Double
    public var minChildWeight: Swift.Double
    public var randomSeed: Swift.Int
    @available(macOS 10.15, iOS 15.0, tvOS 16.0, *)
    public init(validation: CreateML.MLDecisionTreeClassifier.ModelParameters.ValidationData = .split(strategy: .automatic), maxDepth: Swift.Int = 6, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42)
    @available(macOS, introduced: 10.14, deprecated: 10.15, message: "Use the validation property instead.")
    @available(iOS, introduced: 15.0, deprecated: 16.0, message: "Use the validation property instead.")
    @available(tvOS, unavailable)
    public init(validationData: CreateML.MLDataTable?, maxDepth: Swift.Int = 6, minLossReduction: Swift.Double = 0, minChildWeight: Swift.Double = 0.1, randomSeed: Swift.Int = 42)
  }
}
@available(*, unavailable)
extension CreateML.MLDecisionTreeClassifier.ModelParameters : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDecisionTreeClassifier.ModelParameters : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
public struct MLUntypedColumn {
  public var count: Swift.Int {
    get
  }
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public var isEmpty: Swift.Bool {
    get
  }
  public var type: CreateML.MLDataValue.ValueType {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public func column<T>(type: T.Type) -> CreateML.MLDataColumn<T>? where T : CreateML.MLDataValueConvertible
  public var ints: CreateML.MLDataColumn<Swift.Int>? {
    get
  }
  public var doubles: CreateML.MLDataColumn<Swift.Double>? {
    get
  }
  public var strings: CreateML.MLDataColumn<Swift.String>? {
    get
  }
  public var sequences: CreateML.MLDataColumn<CreateML.MLDataValue.SequenceType>? {
    get
  }
  public var dictionaries: CreateML.MLDataColumn<CreateML.MLDataValue.DictionaryType>? {
    get
  }
  public var multiArrays: CreateML.MLDataColumn<CreateML.MLDataValue.MultiArrayType>? {
    get
  }
  public init<S>(_ source: S) where S : Swift.Sequence, S.Element == CreateML.MLDataValue
  public init<S>(_ source: S) where S : Swift.Sequence, S.Element : CreateML.MLDataValueConvertible
  public init(repeating repeatedValue: CreateML.MLDataValue, count: Swift.Int)
  public init<T>(repeating repeatedValue: T, count: Swift.Int) where T : CreateML.MLDataValueConvertible
  public init(_ range: Swift.Range<Swift.Int>)
  public init(_ range: Swift.ClosedRange<Swift.Int>)
  public init()
  public mutating func append(contentsOf newColumn: CreateML.MLUntypedColumn)
}
@available(*, unavailable)
extension CreateML.MLUntypedColumn : Swift.Sendable {
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLUntypedColumn {
  public static func == (a: CreateML.MLUntypedColumn, b: any CreateML.MLDataValueConvertible) -> CreateML.MLUntypedColumn
  public static func != (a: CreateML.MLUntypedColumn, b: any CreateML.MLDataValueConvertible) -> CreateML.MLUntypedColumn
  public static func > (a: CreateML.MLUntypedColumn, b: any CreateML.MLDataValueConvertible) -> CreateML.MLUntypedColumn
  public static func < (a: CreateML.MLUntypedColumn, b: any CreateML.MLDataValueConvertible) -> CreateML.MLUntypedColumn
  public static func >= (a: CreateML.MLUntypedColumn, b: any CreateML.MLDataValueConvertible) -> CreateML.MLUntypedColumn
  public static func <= (a: CreateML.MLUntypedColumn, b: any CreateML.MLDataValueConvertible) -> CreateML.MLUntypedColumn
  public static func + (a: CreateML.MLUntypedColumn, b: any CreateML.MLDataValueConvertible) -> CreateML.MLUntypedColumn
  public static func - (a: CreateML.MLUntypedColumn, b: any CreateML.MLDataValueConvertible) -> CreateML.MLUntypedColumn
  public static func * (a: CreateML.MLUntypedColumn, b: any CreateML.MLDataValueConvertible) -> CreateML.MLUntypedColumn
  public static func / (a: CreateML.MLUntypedColumn, b: any CreateML.MLDataValueConvertible) -> CreateML.MLUntypedColumn
  public static func == (a: any CreateML.MLDataValueConvertible, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func != (a: any CreateML.MLDataValueConvertible, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func > (a: any CreateML.MLDataValueConvertible, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func < (a: any CreateML.MLDataValueConvertible, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func >= (a: any CreateML.MLDataValueConvertible, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func <= (a: any CreateML.MLDataValueConvertible, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func + (a: any CreateML.MLDataValueConvertible, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func - (a: any CreateML.MLDataValueConvertible, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func * (a: any CreateML.MLDataValueConvertible, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func / (a: any CreateML.MLDataValueConvertible, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func == (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func != (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func > (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func < (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func >= (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func <= (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func && (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func || (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func + (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func - (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func * (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
  public static func / (a: CreateML.MLUntypedColumn, b: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLUntypedColumn {
  public subscript(mask: CreateML.MLUntypedColumn) -> CreateML.MLUntypedColumn {
    get
  }
  public subscript(mask: CreateML.MLDataColumn<Swift.Bool>) -> CreateML.MLUntypedColumn {
    get
  }
  public func map<T>(_ lazyTransform: @escaping (CreateML.MLDataValue) -> T?) -> CreateML.MLDataColumn<T> where T : CreateML.MLDataValueConvertible
  public func map<T>(_ lazyTransform: @escaping (CreateML.MLDataValue) -> T) -> CreateML.MLDataColumn<T> where T : CreateML.MLDataValueConvertible
  public func mapMissing<T>(_ lazyTransform: @escaping (CreateML.MLDataValue) -> T?) -> CreateML.MLDataColumn<T> where T : CreateML.MLDataValueConvertible
  public func map<T>(to type: T.Type) -> CreateML.MLDataColumn<T> where T : CreateML.MLDataValueConvertible
  public func dropMissing() -> CreateML.MLUntypedColumn
  public func fillMissing(with value: CreateML.MLDataValue) -> CreateML.MLUntypedColumn
  public func dropDuplicates() -> CreateML.MLUntypedColumn
  public func prefix(_ maxLength: Swift.Int = 10) -> CreateML.MLUntypedColumn
  public func suffix(_ maxLength: Swift.Int = 10) -> CreateML.MLUntypedColumn
  public func sort(byIncreasingOrder: Swift.Bool = true) -> CreateML.MLUntypedColumn
  public func copy() -> CreateML.MLUntypedColumn
  public func materialize() throws -> CreateML.MLUntypedColumn
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLUntypedColumn {
  public init(ints: CreateML.MLUntypedColumn)
  public init(doubles: CreateML.MLUntypedColumn)
  public init(strings: CreateML.MLUntypedColumn)
  public init(sequences: CreateML.MLUntypedColumn)
  public init(dictionaries: CreateML.MLUntypedColumn)
  public init(multiArrays: CreateML.MLUntypedColumn)
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLUntypedColumn {
  public subscript(index: Swift.Int) -> CreateML.MLDataValue {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLUntypedColumn {
  public subscript(slice: Swift.Range<Swift.Int>) -> CreateML.MLUntypedColumn {
    get
  }
  public subscript<R>(slice: R) -> CreateML.MLUntypedColumn where R : Swift.RangeExpression, R.Bound == Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension Swift.Array where Element == CreateML.MLDataValue {
  public init(_ untypedColumn: CreateML.MLUntypedColumn)
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLUntypedColumn : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLUntypedColumn : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Swift.CustomPlaygroundDisplayConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var playgroundDescription: Any {
    get
  }
}
@_hasMissingDesignatedInitializers @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
final public class MLJob<Result> : Combine.Cancellable {
  final public let startDate: Foundation.Date
  final public let progress: Foundation.Progress
  final public var isCanceled: Swift.Bool {
    get
  }
  final public var checkpoints: Combine.AnyPublisher<CreateML.MLCheckpoint, Swift.Never> {
    get
  }
  final public var result: Combine.AnyPublisher<Result, any Swift.Error> {
    get
  }
  @available(macOS 12.0, iOS 15.0, tvOS 16.0, *)
  final public var phase: Combine.AnyPublisher<CreateML.MLPhase, Swift.Never> {
    get
  }
  final public func cancel()
  @objc deinit
}
extension CreateML.MLDataTable {
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public func pack(columnsNamed: Swift.String..., to: Swift.String, type: CreateML.MLDataTable.PackType = .sequence, filling: CreateML.MLDataValue = MLDataValue.invalid) -> CreateML.MLDataTable
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public func unpack(columnNamed: Swift.String, valueTypes: [CreateML.MLDataValue.ValueType]? = nil, indexSubset: [Swift.Int]? = nil, keySubset: [Swift.String]? = nil) -> CreateML.MLDataTable
  @available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
  public enum PackType : Swift.Sendable {
    case sequence
    case dictionary
    public static func == (a: CreateML.MLDataTable.PackType, b: CreateML.MLDataTable.PackType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLProgress.Metric : Swift.RawRepresentable {}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.ValueType : Swift.Equatable {}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataValue.ValueType : Swift.Hashable {}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLPhase : Swift.Equatable {}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLPhase : Swift.Hashable {}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLPhase : Swift.RawRepresentable {}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.JoinType : Swift.Equatable {}
@available(macOS 10.14, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.JoinType : Swift.Hashable {}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.PackType : Swift.Equatable {}
@available(macOS 11.0, iOS 15.0, tvOS 16.0, *)
extension CreateML.MLDataTable.PackType : Swift.Hashable {}
