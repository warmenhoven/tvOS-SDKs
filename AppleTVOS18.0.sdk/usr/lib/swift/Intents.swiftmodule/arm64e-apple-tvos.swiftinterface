// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.7.24 clang-1600.0.25.1)
// swift-module-flags: -target arm64e-apple-tvos18.0 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftIntents -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-bare-slash-regex -user-module-version 12 -module-name Intents
import Foundation
@_exported import Intents
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 14.0, *)
@available(macOS, unavailable)
extension Intents.INMediaSearch {
  @nonobjc convenience public init(mediaType: Intents.INMediaItemType = .unknown, sortOrder: Intents.INMediaSortOrder = .unknown, mediaName: Swift.String? = nil, artistName: Swift.String? = nil, albumName: Swift.String? = nil, genreNames: [Swift.String]? = nil, moodNames: [Swift.String]? = nil, releaseDate: Intents.INDateComponentsRange? = nil, reference: Intents.INMediaReference = .unknown, mediaIdentifier: Swift.String? = nil)
}
@available(macOS 10.15, iOS 10.3, watchOS 3.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INSetCarLockStatusIntent {
  @nonobjc convenience public init(locked: Swift.Bool?, carName: Intents.INSpeakableString?)
  @nonobjc final public var locked: Swift.Bool? {
    get
  }
}
@available(macOS 10.15, iOS 10.0, watchOS 3.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INRequestRideIntent {
  @nonobjc convenience public init(pickupLocation: CoreLocation.CLPlacemark? = nil, dropOffLocation: CoreLocation.CLPlacemark? = nil, rideOptionName: Intents.INSpeakableString? = nil, partySize: Swift.Int? = nil, paymentMethod: Intents.INPaymentMethod? = nil, scheduledPickupTime: Intents.INDateComponentsRange? = nil)
  @nonobjc final public var partySize: Swift.Int? {
    get
  }
}
@available(macOS 10.15, iOS 11.0, watchOS 4.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INNotebookItemTypeResolutionResult {
  @nonobjc public static func disambiguation(with notebookItemTypesToDisambiguate: [Intents.INNotebookItemType]) -> Self
}
@available(macOS 10.15, iOS 10.0, watchOS 3.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INRideOption {
  @available(iOS 10.0, watchOS 3.2, *)
  @available(swift, obsoleted: 4)
  @nonobjc public var usesMeteredFare: Foundation.NSNumber? {
    get
    set(newUsesMeteredFare)
  }
  @available(swift 4.0)
  @available(iOS 10.0, watchOS 3.2, *)
  @nonobjc public var usesMeteredFare: Swift.Bool? {
    get
    set(newUsesMeteredFare)
  }
}
@available(iOS 10.0, macOS 11.0, watchOS 3.2, tvOS 14.0, *)
extension Intents.INIntegerResolutionResult {
  @nonobjc public static func confirmationRequired(with valueToConfirm: Swift.Int?) -> Self
}
@available(macOS 10.15, iOS 12.0, watchOS 5.0, tvOS 14.0, *)
@available(macOS, unavailable)
extension Intents.INPlayMediaIntent {
  @available(iOS, introduced: 12.0, obsoleted: 13.0)
  @available(watchOS, introduced: 5.0, obsoleted: 6.0)
  @available(tvOS, unavailable)
  @nonobjc convenience public init(mediaItems: [Intents.INMediaItem]? = nil, mediaContainer: Intents.INMediaItem? = nil, playShuffled: Swift.Bool? = nil, playbackRepeatMode: Intents.INPlaybackRepeatMode = .unknown, resumePlayback: Swift.Bool? = nil)
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 14.0, *)
  @nonobjc convenience public init(mediaItems: [Intents.INMediaItem]? = nil, mediaContainer: Intents.INMediaItem? = nil, playShuffled: Swift.Bool? = nil, playbackRepeatMode: Intents.INPlaybackRepeatMode = .unknown, resumePlayback: Swift.Bool? = nil, playbackQueueLocation: Intents.INPlaybackQueueLocation = .unknown, playbackSpeed: Swift.Double? = nil, mediaSearch: Intents.INMediaSearch? = nil)
  @nonobjc final public var playShuffled: Swift.Bool? {
    get
  }
  @nonobjc final public var resumePlayback: Swift.Bool? {
    get
  }
  @available(iOS 13.0, watchOS 6.0, *)
  @nonobjc final public var playbackSpeed: Swift.Double? {
    get
  }
}
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(iOS, introduced: 10.0, deprecated: 15.0, message: "INSearchCallHistoryIntent is deprecated. There is no replacement.")
@available(watchOS, introduced: 3.2, deprecated: 8.0, message: "INSearchCallHistoryIntent is deprecated. There is no replacement.")
extension Intents.INSearchCallHistoryIntent {
  @available(iOS, introduced: 11.0, deprecated: 15.0, message: "INSearchCallHistoryIntent is deprecated. There is no replacement.")
  @available(watchOS, introduced: 4.0, deprecated: 8.0, message: "INSearchCallHistoryIntent is deprecated. There is no replacement.")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @nonobjc convenience public init(dateCreated: Intents.INDateComponentsRange? = nil, recipient: Intents.INPerson? = nil, callCapabilities: Intents.INCallCapabilityOptions, callTypes: Intents.INCallRecordTypeOptions, unseen: Swift.Bool? = nil)
  @available(iOS, introduced: 11.0, deprecated: 15.0, message: "unseen is deprecated. There is no replacement.")
  @available(watchOS, introduced: 4.0, deprecated: 8.0, message: "unseen is deprecated. There is no replacement.")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @nonobjc final public var unseen: Swift.Bool? {
    get
  }
}
extension Foundation.NSString {
  @available(iOS 12.0, macOS 10.14, watchOS 5.0, tvOS 14.0, *)
  public class func deferredLocalizedIntentsString(with format: Swift.String, _ args: any Swift.CVarArg...) -> Foundation.NSString
  @available(iOS 12.0, macOS 10.14, watchOS 5.0, *)
  public class func deferredLocalizedIntentsString(with format: Swift.String, table: Swift.String, _ args: any Swift.CVarArg...) -> Foundation.NSString
  @available(iOS 12.0, macOS 10.14, watchOS 5.0, *)
  public class func deferredLocalizedIntentsString(with format: Swift.String, table: Swift.String, arguments: Swift.CVaListPointer) -> Foundation.NSString
}
@available(macOS 10.15, iOS 11.0, watchOS 4.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INCallRecord {
  @available(iOS 13.0, watchOS 6.0, *)
  @nonobjc convenience public init(identifier: Swift.String, dateCreated: Foundation.Date? = nil, caller: Intents.INPerson? = nil, callRecordType: Intents.INCallRecordType = .unknown, callCapability: Intents.INCallCapability = .unknown, callDuration: Swift.Double? = nil, unseen: Swift.Bool? = nil, numberOfCalls: Swift.Int? = nil)
  @available(iOS, obsoleted: 13.0)
  @available(watchOS, obsoleted: 6.0)
  @nonobjc convenience public init(identifier: Swift.String, dateCreated: Foundation.Date? = nil, caller: Intents.INPerson? = nil, callRecordType: Intents.INCallRecordType, callCapability: Intents.INCallCapability, callDuration: Swift.Double? = nil, unseen: Swift.Bool? = nil)
  @nonobjc final public var callDuration: Swift.Double? {
    get
  }
  @nonobjc final public var unseen: Swift.Bool? {
    get
  }
  @available(iOS 13.0, watchOS 6.0, *)
  @nonobjc final public var numberOfCalls: Swift.Int? {
    get
  }
}
@available(iOS 10.0, macOS 11.0, watchOS 3.2, tvOS 14.0, *)
extension Intents.INDoubleResolutionResult {
  @nonobjc public static func confirmationRequired(with valueToConfirm: Swift.Double?) -> Self
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 14.0, *)
@available(macOS, unavailable)
extension Intents.INMediaUserContext {
  @available(iOS 13.0, watchOS 6.0, tvOS 14.0, *)
  @nonobjc final public var numberOfLibraryItems: Swift.Int? {
    get
    set
  }
}
@available(iOS 10.0, macOS 11.0, watchOS 3.2, tvOS 14.0, *)
public protocol _INIntentSetImageKeyPath {
}
extension Intents._INIntentSetImageKeyPath {
  @available(iOS 12.0, watchOS 5.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func setImage<Value>(_ image: Intents.INImage?, forParameterNamed parameterName: Swift.KeyPath<Self, Value>)
  @available(iOS 12.0, watchOS 5.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public func image<Value>(forParameterNamed parameterName: Swift.KeyPath<Self, Value>) -> Intents.INImage?
}
@available(iOS 10.0, macOS 11.0, watchOS 3.2, tvOS 14.0, *)
extension Intents.INIntent : Intents._INIntentSetImageKeyPath {
}
@available(iOS 10.0, macOS 11.0, watchOS 3.2, tvOS 14.0, *)
public protocol INIntentSetImageKeyPath : Intents._INIntentSetImageKeyPath {
}
@available(iOS 10.0, macOS 11.0, watchOS 3.2, tvOS 14.0, *)
extension Intents.INIntent : Intents.INIntentSetImageKeyPath {
}
@available(iOS, introduced: 13.0, deprecated: 15.0, message: "INDeleteTasksIntent is deprecated. There is no replacement.")
@available(watchOS, introduced: 6.0, deprecated: 8.0, message: "INDeleteTasksIntent is deprecated. There is no replacement.")
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INDeleteTasksIntent {
  @available(iOS, introduced: 13.0, deprecated: 15.0, message: "INDeleteTasksIntent is deprecated. There is no replacement.")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "INDeleteTasksIntent is deprecated. There is no replacement.")
  @available(tvOS, unavailable)
  @available(macOS, unavailable)
  @nonobjc convenience public init(taskList: Intents.INTaskList? = nil, tasks: [Intents.INTask]? = nil, all: Swift.Bool? = nil)
  @available(iOS, introduced: 13.0, deprecated: 15.0, message: "INDeleteTasksIntent is deprecated. There is no replacement.")
  @available(watchOS, introduced: 6.0, deprecated: 8.0, message: "INDeleteTasksIntent is deprecated. There is no replacement.")
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @nonobjc final public var all: Swift.Bool? {
    get
  }
}
@available(macOS 10.15, iOS 10.3, watchOS 3.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INGetCarPowerLevelStatusIntentResponse {
  @nonobjc final public var fuelPercentRemaining: Swift.Float? {
    get
    set(newPercent)
  }
  @nonobjc final public var chargePercentRemaining: Swift.Float? {
    get
    set(newPercent)
  }
  @available(iOS 12.0, watchOS 5.0, *)
  @nonobjc final public var charging: Swift.Bool? {
    get
    set(newCharging)
  }
  @available(iOS 12.0, watchOS 5.0, *)
  @nonobjc final public var minutesToFull: Swift.Int? {
    get
    set(newMinutesToFull)
  }
}
@available(macOS 10.15, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(iOS, introduced: 10.0, deprecated: 15.0, message: "INSearchForPhotosIntentResponse is deprecated. There is no replacement.")
@available(watchOS, introduced: 3.2, deprecated: 8.0, message: "INSearchForPhotosIntentResponse is deprecated. There is no replacement.")
extension Intents.INSearchForPhotosIntentResponse {
  @available(iOS, introduced: 10.0, deprecated: 15.0, message: "searchResultsCount is deprecated. There is no replacement.")
  @available(watchOS, introduced: 3.2, deprecated: 8.0, message: "searchResultsCount is deprecated. There is no replacement.")
  @nonobjc final public var searchResultsCount: Swift.Int? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INSnoozeTasksIntent {
  @nonobjc convenience public init(tasks: [Intents.INTask]? = nil, nextTriggerTime: Intents.INDateComponentsRange? = nil, all: Swift.Bool? = nil)
  @nonobjc final public var all: Swift.Bool? {
    get
  }
}
@available(macOS 10.15.4, iOS 13.0, watchOS 6.0, tvOS 14.0, *)
@available(macOS, unavailable)
public enum INMediaDestination : Foundation.ReferenceConvertible {
  public typealias ReferenceType = Intents.INMediaDestinationReference
  case library
  case playlist(Swift.String)
}
@available(macOS 10.15.4, iOS 13.0, watchOS 6.0, tvOS 14.0, *)
@available(macOS, unavailable)
extension Intents.INMediaDestination {
  public var playlistName: Swift.String? {
    get
  }
}
@available(macOS 10.15.4, iOS 13.0, watchOS 6.0, tvOS 14.0, *)
@available(macOS, unavailable)
extension Intents.INMediaDestination : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.15.4, iOS 13.0, watchOS 6.0, tvOS 14.0, *)
@available(macOS, unavailable)
extension Intents.INMediaDestination : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.15.4, iOS 13.0, watchOS 6.0, tvOS 14.0, *)
@available(macOS, unavailable)
extension Intents.INMediaDestination : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15.4, iOS 13.0, watchOS 6.0, tvOS 14.0, *)
@available(macOS, unavailable)
extension Intents.INMediaDestination : Swift.Equatable {
  public static func == (a: Intents.INMediaDestination, b: Intents.INMediaDestination) -> Swift.Bool
}
@available(macOS 10.15.4, iOS 13.0, watchOS 6.0, tvOS 14.0, *)
@available(macOS, unavailable)
extension Intents.INMediaDestination : Swift._ObjectiveCBridgeable {
  @_semantics("convertToObjectiveC") public func _bridgeToObjectiveC() -> Intents.INMediaDestinationReference
  public static func _forceBridgeFromObjectiveC(_ source: Intents.INMediaDestinationReference, result: inout Intents.INMediaDestination?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Intents.INMediaDestinationReference, result: inout Intents.INMediaDestination?) -> Swift.Bool
  @_effects(readonly) public static func _unconditionallyBridgeFromObjectiveC(_ source: Intents.INMediaDestinationReference?) -> Intents.INMediaDestination
  @available(iOS 13.0, tvOS 14.0, watchOS 6.0, *)
  @available(macOS, unavailable, introduced: 10.15.4)
  public typealias _ObjectiveCType = Intents.INMediaDestinationReference
}
@available(macOS 10.15, iOS 10.0, watchOS 3.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INStartWorkoutIntent {
  @nonobjc convenience public init(workoutName: Intents.INSpeakableString? = nil, goalValue: Swift.Double? = nil, workoutGoalUnitType: Intents.INWorkoutGoalUnitType = .unknown, workoutLocationType: Intents.INWorkoutLocationType = .unknown, isOpenEnded: Swift.Bool? = nil)
  @nonobjc final public var goalValue: Swift.Double? {
    get
  }
  @nonobjc final public var isOpenEnded: Swift.Bool? {
    get
  }
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INRestaurantReservation {
  @nonobjc convenience public init(itemReference: Intents.INSpeakableString, reservationNumber: Swift.String? = nil, bookingTime: Foundation.Date? = nil, reservationStatus: Intents.INReservationStatus = .unknown, reservationHolderName: Swift.String? = nil, actions: [Intents.INReservationAction]? = nil, reservationDuration: Intents.INDateComponentsRange, partySize: Swift.Int? = nil, restaurantLocation: CoreLocation.CLPlacemark)
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, *)
  @nonobjc convenience public init(itemReference: Intents.INSpeakableString, reservationNumber: Swift.String? = nil, bookingTime: Foundation.Date? = nil, reservationStatus: Intents.INReservationStatus = .unknown, reservationHolderName: Swift.String? = nil, actions: [Intents.INReservationAction]? = nil, url: Foundation.URL? = nil, reservationDuration: Intents.INDateComponentsRange, partySize: Swift.Int? = nil, restaurantLocation: CoreLocation.CLPlacemark)
  @nonobjc final public var partySize: Swift.Int? {
    get
  }
}
@available(iOS 10.0, macOS 11.0, watchOS 3.2, tvOS 14.0, *)
extension Intents.INBooleanResolutionResult {
  @nonobjc public static func confirmationRequired(with valueToConfirm: Swift.Bool?) -> Self
}
@available(iOS 12.0, macOS 11.0, watchOS 5.0, *)
@available(tvOS, unavailable)
public enum INShortcut : Foundation.ReferenceConvertible {
  public typealias ReferenceType = Intents.INShortcutReference
  case intent(Intents.INIntent)
  case userActivity(Foundation.NSUserActivity)
}
@available(iOS 12.0, macOS 11.0, watchOS 5.0, *)
@available(tvOS, unavailable)
extension Intents.INShortcut {
  public init?(intent: Intents.INIntent)
  public init(userActivity: Foundation.NSUserActivity)
}
@available(iOS 12.0, macOS 11.0, watchOS 5.0, *)
@available(tvOS, unavailable)
extension Intents.INShortcut {
  public var intent: Intents.INIntent? {
    get
  }
  public var userActivity: Foundation.NSUserActivity? {
    get
  }
}
@available(iOS 12.0, macOS 11.0, watchOS 5.0, *)
@available(tvOS, unavailable)
extension Intents.INShortcut : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 12.0, macOS 11.0, watchOS 5.0, *)
@available(tvOS, unavailable)
extension Intents.INShortcut : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 12.0, macOS 11.0, watchOS 5.0, *)
@available(tvOS, unavailable)
extension Intents.INShortcut : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 12.0, macOS 11.0, watchOS 5.0, *)
@available(tvOS, unavailable)
extension Intents.INShortcut : Swift.Equatable {
  public static func == (a: Intents.INShortcut, b: Intents.INShortcut) -> Swift.Bool
}
@available(iOS 12.0, macOS 11.0, watchOS 5.0, *)
@available(tvOS, unavailable)
extension Intents.INShortcut : Swift._ObjectiveCBridgeable {
  @_semantics("convertToObjectiveC") public func _bridgeToObjectiveC() -> Intents.INShortcutReference
  public static func _forceBridgeFromObjectiveC(_ source: Intents.INShortcutReference, result: inout Intents.INShortcut?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Intents.INShortcutReference, result: inout Intents.INShortcut?) -> Swift.Bool
  @_effects(readonly) public static func _unconditionallyBridgeFromObjectiveC(_ source: Intents.INShortcutReference?) -> Intents.INShortcut
  @available(iOS 12.0, watchOS 5.0, macOS 11.0, *)
  @available(tvOS, unavailable)
  public typealias _ObjectiveCType = Intents.INShortcutReference
}
@available(macOS 10.15, iOS 13.0, watchOS 6.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INLodgingReservation {
  @nonobjc convenience public init(itemReference: Intents.INSpeakableString, reservationNumber: Swift.String? = nil, bookingTime: Foundation.Date? = nil, reservationStatus: Intents.INReservationStatus = .unknown, reservationHolderName: Swift.String? = nil, actions: [Intents.INReservationAction]? = nil, lodgingBusinessLocation: CoreLocation.CLPlacemark, reservationDuration: Intents.INDateComponentsRange, numberOfAdults: Swift.Int? = nil, numberOfChildren: Swift.Int? = nil)
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, *)
  @nonobjc convenience public init(itemReference: Intents.INSpeakableString, reservationNumber: Swift.String? = nil, bookingTime: Foundation.Date? = nil, reservationStatus: Intents.INReservationStatus = .unknown, reservationHolderName: Swift.String? = nil, actions: [Intents.INReservationAction]? = nil, url: Foundation.URL? = nil, lodgingBusinessLocation: CoreLocation.CLPlacemark, reservationDuration: Intents.INDateComponentsRange, numberOfAdults: Swift.Int? = nil, numberOfChildren: Swift.Int? = nil)
  @nonobjc final public var numberOfAdults: Swift.Int? {
    get
  }
  @nonobjc final public var numberOfChildren: Swift.Int? {
    get
  }
}
@available(macOS 10.15, iOS 10.3, watchOS 3.2, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension Intents.INGetCarLockStatusIntentResponse {
  @nonobjc final public var locked: Swift.Bool? {
    get
    set(newLocked)
  }
}
@available(iOS 15.0, macOS 12.0, watchOS 8.0, *)
@available(tvOS, unavailable)
extension Intents.INFocusStatus {
  @nonobjc convenience public init(isFocused: Swift.Bool? = nil)
  @nonobjc final public var isFocused: Swift.Bool? {
    get
  }
}
@available(macOS 10.15, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(iOS, introduced: 10.0, deprecated: 15.0, message: "INStartPhotoPlaybackIntentResponse is deprecated. There is no replacement.")
@available(watchOS, introduced: 3.2, deprecated: 8.0, message: "INStartPhotoPlaybackIntentResponse is deprecated. There is no replacement.")
extension Intents.INStartPhotoPlaybackIntentResponse {
  @available(iOS, introduced: 10.0, deprecated: 15.0, message: "searchResultsCount is deprecated. There is no replacement.")
  @available(watchOS, introduced: 3.2, deprecated: 8.0, message: "searchResultsCount is deprecated. There is no replacement.")
  @nonobjc final public var searchResultsCount: Swift.Int? {
    get
    set
  }
}
